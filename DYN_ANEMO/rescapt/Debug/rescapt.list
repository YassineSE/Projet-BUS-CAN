
rescapt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08005f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004f4  2000000c  08005f20  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000500  08005f20  00020500  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000147dc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000033d8  00000000  00000000  00034811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011c0  00000000  00000000  00037bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001058  00000000  00000000  00038db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001d59a  00000000  00000000  00039e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001b7f6  00000000  00000000  000573a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0008c67f  00000000  00000000  00072b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000ff217  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004908  00000000  00000000  000ff268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b60 	.word	0x08005b60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005b60 	.word	0x08005b60

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 ff4f 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	200f      	movs	r0, #15
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f005 f93d 	bl	80053e6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 ff75 	bl	8001086 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80001b4:	f000 ff2f 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000078 	.word	0x20000078

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000078 	.word	0x20000078

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_mcr = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]

  /* Check CAN handle */
  if(hcan == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_CAN_Init+0x1e>
  {
     return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0ce      	b.n	8000414 <HAL_CAN_Init+0x1bc>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if(hcan->State == HAL_CAN_STATE_RESET)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800027c:	b2db      	uxtb	r3, r3
 800027e:	2b00      	cmp	r3, #0
 8000280:	d106      	bne.n	8000290 <HAL_CAN_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hcan-> Lock = HAL_UNLOCKED;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2200      	movs	r2, #0
 8000286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	f000 f997 	bl	80005be <HAL_CAN_MspInit>
  }

  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2202      	movs	r2, #2
 8000294:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f022 0202 	bic.w	r2, r2, #2
 80002a6:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f042 0201 	orr.w	r2, r2, #1
 80002b6:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80002b8:	f7ff ffa0 	bl	80001fc <HAL_GetTick>
 80002bc:	60f8      	str	r0, [r7, #12]

  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80002be:	e010      	b.n	80002e2 <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80002c0:	f7ff ff9c 	bl	80001fc <HAL_GetTick>
 80002c4:	4602      	mov	r2, r0
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	2b0a      	cmp	r3, #10
 80002cc:	d909      	bls.n	80002e2 <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2203      	movs	r2, #3
 80002d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80002de:	2303      	movs	r3, #3
 80002e0:	e098      	b.n	8000414 <HAL_CAN_Init+0x1bc>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	685b      	ldr	r3, [r3, #4]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0e7      	beq.n	80002c0 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d179      	bne.n	80003f2 <HAL_CAN_Init+0x19a>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d103      	bne.n	800030e <HAL_CAN_Init+0xb6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030c:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d103      	bne.n	800031e <HAL_CAN_Init+0xc6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8000316:	693b      	ldr	r3, [r7, #16]
 8000318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031c:	613b      	str	r3, [r7, #16]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6a1b      	ldr	r3, [r3, #32]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d103      	bne.n	800032e <HAL_CAN_Init+0xd6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	f043 0320 	orr.w	r3, r3, #32
 800032c:	613b      	str	r3, [r7, #16]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000332:	2b01      	cmp	r3, #1
 8000334:	d103      	bne.n	800033e <HAL_CAN_Init+0xe6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	613b      	str	r3, [r7, #16]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000342:	2b01      	cmp	r3, #1
 8000344:	d103      	bne.n	800034e <HAL_CAN_Init+0xf6>
    {
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	613b      	str	r3, [r7, #16]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000352:	2b01      	cmp	r3, #1
 8000354:	d103      	bne.n	800035e <HAL_CAN_Init+0x106>
    {
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	f043 0304 	orr.w	r3, r3, #4
 800035c:	613b      	str	r3, [r7, #16]
    }

    /* Update register MCR */
    MODIFY_REG(hcan->Instance->MCR,
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f023 01fc 	bic.w	r1, r3, #252	; 0xfc
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	693a      	ldr	r2, [r7, #16]
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
               CAN_MCR_RFLM |
               CAN_MCR_TXFP,
               tmp_mcr);

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689a      	ldr	r2, [r3, #8]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	431a      	orrs	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	431a      	orrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	ea42 0103 	orr.w	r1, r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	1e5a      	subs	r2, r3, #1
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	430a      	orrs	r2, r1
 8000396:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f022 0201 	bic.w	r2, r2, #1
 80003a6:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 80003a8:	f7ff ff28 	bl	80001fc <HAL_GetTick>
 80003ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80003ae:	e010      	b.n	80003d2 <HAL_CAN_Init+0x17a>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80003b0:	f7ff ff24 	bl	80001fc <HAL_GetTick>
 80003b4:	4602      	mov	r2, r0
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	1ad3      	subs	r3, r2, r3
 80003ba:	2b0a      	cmp	r3, #10
 80003bc:	d909      	bls.n	80003d2 <HAL_CAN_Init+0x17a>
      {
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2203      	movs	r2, #3
 80003c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2200      	movs	r2, #0
 80003ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80003ce:	2303      	movs	r3, #3
 80003d0:	e020      	b.n	8000414 <HAL_CAN_Init+0x1bc>
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0e7      	beq.n	80003b0 <HAL_CAN_Init+0x158>
      }
    }

    /* Check acknowledged */
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <HAL_CAN_Init+0x19a>
    {
      status = CAN_INITSTATUS_SUCCESS;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
    }
  }

  if(status == CAN_INITSTATUS_SUCCESS)
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	d108      	bne.n	800040a <HAL_CAN_Init+0x1b2>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2200      	movs	r2, #0
 80003fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2201      	movs	r2, #1
 8000402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	e004      	b.n	8000414 <HAL_CAN_Init+0x1bc>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2204      	movs	r2, #4
 800040e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_ERROR;
 8000412:	2301      	movs	r3, #1
  }
}
 8000414:	4618      	mov	r0, r3
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));

  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	2201      	movs	r2, #1
 8000430:	fa02 f303 	lsl.w	r3, r2, r3
 8000434:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800043e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000446:	021b      	lsls	r3, r3, #8
 8000448:	431a      	orrs	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f042 0201 	orr.w	r2, r2, #1
 8000452:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );

  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	43da      	mvns	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	400a      	ands	r2, r1
 8000468:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d127      	bne.n	80004c4 <HAL_CAN_ConfigFilter+0xa8>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	43da      	mvns	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	400a      	ands	r2, r1
 8000486:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 800049e:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 80004a0:	3248      	adds	r2, #72	; 0x48
 80004a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	689b      	ldr	r3, [r3, #8]
 80004aa:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6819      	ldr	r1, [r3, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80004ba:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 80004bc:	3348      	adds	r3, #72	; 0x48
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	440b      	add	r3, r1
 80004c2:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	69db      	ldr	r3, [r3, #28]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d126      	bne.n	800051a <HAL_CAN_ConfigFilter+0xfe>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	430a      	orrs	r2, r1
 80004dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 80004f4:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 =
 80004f6:	3248      	adds	r2, #72	; 0x48
 80004f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	0418      	lsls	r0, r3, #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6819      	ldr	r1, [r3, #0]
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8000510:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 =
 8000512:	3348      	adds	r3, #72	; 0x48
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	440b      	add	r3, r1
 8000518:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10b      	bne.n	800053a <HAL_CAN_ConfigFilter+0x11e>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	43da      	mvns	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	400a      	ands	r2, r1
 8000534:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000538:	e009      	b.n	800054e <HAL_CAN_ConfigFilter+0x132>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	430a      	orrs	r2, r1
 800054a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10b      	bne.n	800056e <HAL_CAN_ConfigFilter+0x152>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	43da      	mvns	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	400a      	ands	r2, r1
 8000568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800056c:	e009      	b.n	8000582 <HAL_CAN_ConfigFilter+0x166>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	430a      	orrs	r2, r1
 800057e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6a1b      	ldr	r3, [r3, #32]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d109      	bne.n	800059e <HAL_CAN_ConfigFilter+0x182>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	430a      	orrs	r2, r1
 800059a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f022 0201 	bic.w	r2, r2, #1
 80005ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Return function status */
  return HAL_OK;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <HAL_CAN_MspInit>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit can be implemented in the user file
   */
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.
  * @param  Timeout: Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 80005da:	2304      	movs	r3, #4
 80005dc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  /* Process locked */
  __HAL_LOCK(hcan);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d101      	bne.n	80005f0 <HAL_CAN_Transmit+0x20>
 80005ec:	2302      	movs	r3, #2
 80005ee:	e15a      	b.n	80008a6 <HAL_CAN_Transmit+0x2d6>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2201      	movs	r2, #1
 80005f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b22      	cmp	r3, #34	; 0x22
 8000602:	d104      	bne.n	800060e <HAL_CAN_Transmit+0x3e>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2232      	movs	r2, #50	; 0x32
 8000608:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800060c:	e003      	b.n	8000616 <HAL_CAN_Transmit+0x46>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2212      	movs	r2, #18
 8000612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Select one empty transmit mailbox */
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	689b      	ldr	r3, [r3, #8]
 800061c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <HAL_CAN_Transmit+0x5a>
  {
    transmitmailbox = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e015      	b.n	8000656 <HAL_CAN_Transmit+0x86>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <HAL_CAN_Transmit+0x6e>
  {
    transmitmailbox = 1;
 8000638:	2301      	movs	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	e00b      	b.n	8000656 <HAL_CAN_Transmit+0x86>
  }
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME2))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <HAL_CAN_Transmit+0x82>
  {
    transmitmailbox = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	e001      	b.n	8000656 <HAL_CAN_Transmit+0x86>
  }
  else
  {
    transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 8000652:	2304      	movs	r3, #4
 8000654:	60fb      	str	r3, [r7, #12]
  }

  if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b04      	cmp	r3, #4
 800065a:	f000 811b 	beq.w	8000894 <HAL_CAN_Transmit+0x2c4>
  {
    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	3318      	adds	r3, #24
 8000666:	011b      	lsls	r3, r3, #4
 8000668:	4413      	add	r3, r2
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	6811      	ldr	r1, [r2, #0]
 8000670:	f003 0201 	and.w	r2, r3, #1
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3318      	adds	r3, #24
 8000678:	011b      	lsls	r3, r3, #4
 800067a:	440b      	add	r3, r1
 800067c:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d117      	bne.n	80006b8 <HAL_CAN_Transmit+0xe8>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	3318      	adds	r3, #24
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	4413      	add	r3, r2
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	0559      	lsls	r1, r3, #21
                                                           hcan->pTxMsg->RTR);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 80006a4:	430b      	orrs	r3, r1
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	6809      	ldr	r1, [r1, #0]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3318      	adds	r3, #24
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	440b      	add	r3, r1
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e01a      	b.n	80006ee <HAL_CAN_Transmit+0x11e>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3318      	adds	r3, #24
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	4413      	add	r3, r2
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	00d9      	lsls	r1, r3, #3
                                                           hcan->pTxMsg->IDE |
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 80006d4:	4319      	orrs	r1, r3
                                                           hcan->pTxMsg->RTR);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE |
 80006dc:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	6809      	ldr	r1, [r1, #0]
 80006e2:	431a      	orrs	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3318      	adds	r3, #24
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	440b      	add	r3, r1
 80006ec:	601a      	str	r2, [r3, #0]
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f8:	f002 020f 	and.w	r2, r2, #15
 80006fc:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3318      	adds	r3, #24
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	4413      	add	r3, r2
 800070a:	3304      	adds	r3, #4
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	6811      	ldr	r1, [r2, #0]
 8000712:	f023 020f 	bic.w	r2, r3, #15
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	3318      	adds	r3, #24
 800071a:	011b      	lsls	r3, r3, #4
 800071c:	440b      	add	r3, r1
 800071e:	3304      	adds	r3, #4
 8000720:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3318      	adds	r3, #24
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	4413      	add	r3, r2
 800072e:	3304      	adds	r3, #4
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	6809      	ldr	r1, [r1, #0]
 800073c:	431a      	orrs	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3318      	adds	r3, #24
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	440b      	add	r3, r1
 8000746:	3304      	adds	r3, #4
 8000748:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) |
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	6a1b      	ldr	r3, [r3, #32]
 8000750:	061a      	lsls	r2, r3, #24
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	041b      	lsls	r3, r3, #16
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	6809      	ldr	r1, [r1, #0]
 8000770:	431a      	orrs	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	011b      	lsls	r3, r3, #4
 8000776:	440b      	add	r3, r1
 8000778:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800077c:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_BIT_POSITION) |
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	061a      	lsls	r2, r3, #24
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078c:	041b      	lsls	r3, r3, #16
 800078e:	431a      	orrs	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	431a      	orrs	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	6809      	ldr	r1, [r1, #0]
 80007a4:	431a      	orrs	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	440b      	add	r3, r1
 80007ac:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80007b0:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_BIT_POSITION) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_BIT_POSITION)  );
    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3318      	adds	r3, #24
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	6811      	ldr	r1, [r2, #0]
 80007c4:	f043 0201 	orr.w	r2, r3, #1
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	3318      	adds	r3, #24
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	440b      	add	r3, r1
 80007d0:	601a      	str	r2, [r3, #0]

    /* Get timeout */
    tickstart = HAL_GetTick();
 80007d2:	f7ff fd13 	bl	80001fc <HAL_GetTick>
 80007d6:	60b8      	str	r0, [r7, #8]

    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80007d8:	e018      	b.n	800080c <HAL_CAN_Transmit+0x23c>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007e0:	d014      	beq.n	800080c <HAL_CAN_Transmit+0x23c>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d007      	beq.n	80007f8 <HAL_CAN_Transmit+0x228>
 80007e8:	f7ff fd08 	bl	80001fc <HAL_GetTick>
 80007ec:	4602      	mov	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d209      	bcs.n	800080c <HAL_CAN_Transmit+0x23c>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2203      	movs	r2, #3
 80007fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8000808:	2303      	movs	r3, #3
 800080a:	e04c      	b.n	80008a6 <HAL_CAN_Transmit+0x2d6>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10b      	bne.n	800082a <HAL_CAN_Transmit+0x25a>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <HAL_CAN_Transmit+0x2e0>)
 800081a:	4013      	ands	r3, r2
 800081c:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <HAL_CAN_Transmit+0x2e0>)
 800081e:	4293      	cmp	r3, r2
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	e019      	b.n	800085e <HAL_CAN_Transmit+0x28e>
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d10b      	bne.n	8000848 <HAL_CAN_Transmit+0x278>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <HAL_CAN_Transmit+0x2e4>)
 8000838:	4013      	ands	r3, r2
 800083a:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <HAL_CAN_Transmit+0x2e4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	e00a      	b.n	800085e <HAL_CAN_Transmit+0x28e>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_CAN_Transmit+0x2e8>)
 8000850:	4013      	ands	r3, r2
 8000852:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_CAN_Transmit+0x2e8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	bf14      	ite	ne
 8000858:	2301      	movne	r3, #1
 800085a:	2300      	moveq	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1bb      	bne.n	80007da <HAL_CAN_Transmit+0x20a>
        }
      }
    }
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b32      	cmp	r3, #50	; 0x32
 800086c:	d108      	bne.n	8000880 <HAL_CAN_Transmit+0x2b0>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2222      	movs	r2, #34	; 0x22
 8000872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800087e:	e003      	b.n	8000888 <HAL_CAN_Transmit+0x2b8>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_READY;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Return function status */
    return HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	e008      	b.n	80008a6 <HAL_CAN_Transmit+0x2d6>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2204      	movs	r2, #4
 8000898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Return function status */
    return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
  }
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	04000003 	.word	0x04000003
 80008b4:	08000300 	.word	0x08000300
 80008b8:	10030000 	.word	0x10030000

080008bc <HAL_CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d005      	beq.n	80008e0 <HAL_CAN_Receive_IT+0x24>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b12      	cmp	r3, #18
 80008de:	d13f      	bne.n	8000960 <HAL_CAN_Receive_IT+0xa4>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d101      	bne.n	80008ee <HAL_CAN_Receive_IT+0x32>
 80008ea:	2302      	movs	r3, #2
 80008ec:	e03b      	b.n	8000966 <HAL_CAN_Receive_IT+0xaa>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2201      	movs	r2, #1
 80008f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d104      	bne.n	800090c <HAL_CAN_Receive_IT+0x50>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2232      	movs	r2, #50	; 0x32
 8000906:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800090a:	e003      	b.n	8000914 <HAL_CAN_Receive_IT+0x58>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2222      	movs	r2, #34	; 0x22
 8000910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	63da      	str	r2, [r3, #60]	; 0x3c
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	6812      	ldr	r2, [r2, #0]
 8000924:	f443 430f 	orr.w	r3, r3, #36608	; 0x8f00
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6153      	str	r3, [r2, #20]
                              CAN_IT_LEC |
                              CAN_IT_ERR |
                              CAN_IT_TME  );

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(FIFONumber == CAN_FIFO0)
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d108      	bne.n	800094e <HAL_CAN_Receive_IT+0x92>
    {
      /* Enable FIFO 0 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f042 0202 	orr.w	r2, r2, #2
 800094a:	615a      	str	r2, [r3, #20]
    if(FIFONumber == CAN_FIFO0)
 800094c:	e00a      	b.n	8000964 <HAL_CAN_Receive_IT+0xa8>
    }
    else
    {
      /* Enable FIFO 1 message pending Interrupt */
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	695a      	ldr	r2, [r3, #20]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f042 0210 	orr.w	r2, r2, #16
 800095c:	615a      	str	r2, [r3, #20]
    if(FIFONumber == CAN_FIFO0)
 800095e:	e001      	b.n	8000964 <HAL_CAN_Receive_IT+0xa8>
    }

  }
  else
  {
    return HAL_BUSY;
 8000960:	2302      	movs	r3, #2
 8000962:	e000      	b.n	8000966 <HAL_CAN_Receive_IT+0xaa>
  }

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b01      	cmp	r3, #1
 8000984:	d11a      	bne.n	80009bc <HAL_CAN_IRQHandler+0x4c>
  {
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	4b83      	ldr	r3, [pc, #524]	; (8000b9c <HAL_CAN_IRQHandler+0x22c>)
 800098e:	4013      	ands	r3, r2
 8000990:	4a82      	ldr	r2, [pc, #520]	; (8000b9c <HAL_CAN_IRQHandler+0x22c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00f      	beq.n	80009b6 <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	4b80      	ldr	r3, [pc, #512]	; (8000ba0 <HAL_CAN_IRQHandler+0x230>)
 800099e:	4013      	ands	r3, r2
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80009a0:	4a7f      	ldr	r2, [pc, #508]	; (8000ba0 <HAL_CAN_IRQHandler+0x230>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d007      	beq.n	80009b6 <HAL_CAN_IRQHandler+0x46>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	4b7d      	ldr	r3, [pc, #500]	; (8000ba4 <HAL_CAN_IRQHandler+0x234>)
 80009ae:	4013      	ands	r3, r2
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80009b0:	4a7c      	ldr	r2, [pc, #496]	; (8000ba4 <HAL_CAN_IRQHandler+0x234>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d102      	bne.n	80009bc <HAL_CAN_IRQHandler+0x4c>
    {
      /* Call transmit function */
      CAN_Transmit_IT(hcan);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f000 f908 	bl	8000bcc <CAN_Transmit_IT>
    }
  }

  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d10b      	bne.n	80009e2 <HAL_CAN_IRQHandler+0x72>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_CAN_IRQHandler+0x72>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 80009da:	2100      	movs	r1, #0
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 f926 	bl	8000c2e <CAN_Receive_IT>
  }

  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	2b10      	cmp	r3, #16
 80009ee:	d10b      	bne.n	8000a08 <HAL_CAN_IRQHandler+0x98>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	f003 0303 	and.w	r3, r3, #3
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_CAN_IRQHandler+0x98>
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000a00:	2101      	movs	r1, #1
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f913 	bl	8000c2e <CAN_Receive_IT>
  }

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d115      	bne.n	8000a42 <HAL_CAN_IRQHandler+0xd2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a24:	d10d      	bne.n	8000a42 <HAL_CAN_IRQHandler+0xd2>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a34:	d105      	bne.n	8000a42 <HAL_CAN_IRQHandler+0xd2>
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	f043 0201 	orr.w	r2, r3, #1
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Warning Flag as read-only */
  }

  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d115      	bne.n	8000a7c <HAL_CAN_IRQHandler+0x10c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a5e:	d10d      	bne.n	8000a7c <HAL_CAN_IRQHandler+0x10c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a6e:	d105      	bne.n	8000a7c <HAL_CAN_IRQHandler+0x10c>
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a74:	f043 0202 	orr.w	r2, r3, #2
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Error Passive Flag as read-only */
  }

  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d115      	bne.n	8000ab6 <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a98:	d10d      	bne.n	8000ab6 <HAL_CAN_IRQHandler+0x146>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8000aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000aa8:	d105      	bne.n	8000ab6 <HAL_CAN_IRQHandler+0x146>
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aae:	f043 0204 	orr.w	r2, r3, #4
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	63da      	str	r2, [r3, #60]	; 0x3c
    /* No need for clear of Bus-Off Flag as read-only */
  }

  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d05c      	beq.n	8000b7e <HAL_CAN_IRQHandler+0x20e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8000ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ad2:	d154      	bne.n	8000b7e <HAL_CAN_IRQHandler+0x20e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8000ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ae2:	d14c      	bne.n	8000b7e <HAL_CAN_IRQHandler+0x20e>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000aee:	2b60      	cmp	r3, #96	; 0x60
 8000af0:	d035      	beq.n	8000b5e <HAL_CAN_IRQHandler+0x1ee>
 8000af2:	2b60      	cmp	r3, #96	; 0x60
 8000af4:	d83a      	bhi.n	8000b6c <HAL_CAN_IRQHandler+0x1fc>
 8000af6:	2b50      	cmp	r3, #80	; 0x50
 8000af8:	d02a      	beq.n	8000b50 <HAL_CAN_IRQHandler+0x1e0>
 8000afa:	2b50      	cmp	r3, #80	; 0x50
 8000afc:	d836      	bhi.n	8000b6c <HAL_CAN_IRQHandler+0x1fc>
 8000afe:	2b40      	cmp	r3, #64	; 0x40
 8000b00:	d01f      	beq.n	8000b42 <HAL_CAN_IRQHandler+0x1d2>
 8000b02:	2b40      	cmp	r3, #64	; 0x40
 8000b04:	d832      	bhi.n	8000b6c <HAL_CAN_IRQHandler+0x1fc>
 8000b06:	2b30      	cmp	r3, #48	; 0x30
 8000b08:	d014      	beq.n	8000b34 <HAL_CAN_IRQHandler+0x1c4>
 8000b0a:	2b30      	cmp	r3, #48	; 0x30
 8000b0c:	d82e      	bhi.n	8000b6c <HAL_CAN_IRQHandler+0x1fc>
 8000b0e:	2b10      	cmp	r3, #16
 8000b10:	d002      	beq.n	8000b18 <HAL_CAN_IRQHandler+0x1a8>
 8000b12:	2b20      	cmp	r3, #32
 8000b14:	d007      	beq.n	8000b26 <HAL_CAN_IRQHandler+0x1b6>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 8000b16:	e029      	b.n	8000b6c <HAL_CAN_IRQHandler+0x1fc>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1c:	f043 0208 	orr.w	r2, r3, #8
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000b24:	e023      	b.n	8000b6e <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b2a:	f043 0210 	orr.w	r2, r3, #16
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000b32:	e01c      	b.n	8000b6e <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b38:	f043 0220 	orr.w	r2, r3, #32
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000b40:	e015      	b.n	8000b6e <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000b4e:	e00e      	b.n	8000b6e <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000b5c:	e007      	b.n	8000b6e <HAL_CAN_IRQHandler+0x1fe>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 8000b6a:	e000      	b.n	8000b6e <HAL_CAN_IRQHandler+0x1fe>
          break;
 8000b6c:	bf00      	nop
    }

    /* Clear Last error code Flag */
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	699a      	ldr	r2, [r3, #24]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b7c:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <HAL_CAN_IRQHandler+0x224>
  {
    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f813 	bl	8000bba <HAL_CAN_ErrorCallback>
  }
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	04000003 	.word	0x04000003
 8000ba0:	08000300 	.word	0x08000300
 8000ba4:	10030000 	.word	0x10030000

08000ba8 <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback can be implemented in the user file
   */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback can be implemented in the user file
   */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0201 	bic.w	r2, r2, #1
 8000be2:	615a      	str	r2, [r3, #20]

  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b12      	cmp	r3, #18
 8000bee:	d107      	bne.n	8000c00 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	695a      	ldr	r2, [r3, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000bfe:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b32      	cmp	r3, #50	; 0x32
 8000c0a:	d104      	bne.n	8000c16 <CAN_Transmit_IT+0x4a>
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2222      	movs	r2, #34	; 0x22
 8000c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000c14:	e003      	b.n	8000c1e <CAN_Transmit_IT+0x52>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Transmission complete callback */
  HAL_CAN_TxCpltCallback(hcan);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffc2 	bl	8000ba8 <HAL_CAN_TxCpltCallback>

  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	70fb      	strb	r3, [r7, #3]
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	78fb      	ldrb	r3, [r7, #3]
 8000c40:	331b      	adds	r3, #27
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4413      	add	r3, r2
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4c:	f002 0204 	and.w	r2, r2, #4
 8000c50:	609a      	str	r2, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10d      	bne.n	8000c78 <CAN_Receive_IT+0x4a>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	331b      	adds	r3, #27
 8000c64:	011b      	lsls	r3, r3, #4
 8000c66:	4413      	add	r3, r2
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	0d5a      	lsrs	r2, r3, #21
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c70:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e00c      	b.n	8000c92 <CAN_Receive_IT+0x64>
  }
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	331b      	adds	r3, #27
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	4413      	add	r3, r2
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000c90:	605a      	str	r2, [r3, #4]
  }

  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	331b      	adds	r3, #27
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	4413      	add	r3, r2
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	f002 0202 	and.w	r2, r2, #2
 8000ca8:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	331b      	adds	r3, #27
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	f002 020f 	and.w	r2, r2, #15
 8000cc2:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	331b      	adds	r3, #27
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	4413      	add	r3, r2
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	0a1a      	lsrs	r2, r3, #8
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	78fb      	ldrb	r3, [r7, #3]
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	4413      	add	r3, r2
 8000ce8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	615a      	str	r2, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	4413      	add	r3, r2
 8000d00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	0a1a      	lsrs	r2, r3, #8
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	619a      	str	r2, [r3, #24]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4413      	add	r3, r2
 8000d1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	0c1a      	lsrs	r2, r3, #16
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	61da      	str	r2, [r3, #28]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	78fb      	ldrb	r3, [r7, #3]
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	4413      	add	r3, r2
 8000d34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	0e1a      	lsrs	r2, r3, #24
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	621a      	str	r2, [r3, #32]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	0a1a      	lsrs	r2, r3, #8
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	4413      	add	r3, r2
 8000d80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0c1a      	lsrs	r2, r3, #16
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	4413      	add	r3, r2
 8000d9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0e1a      	lsrs	r2, r3, #24
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d110      	bne.n	8000dd2 <CAN_Receive_IT+0x1a4>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0220 	orr.w	r2, r2, #32
 8000dbe:	60da      	str	r2, [r3, #12]

    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695a      	ldr	r2, [r3, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0202 	bic.w	r2, r2, #2
 8000dce:	615a      	str	r2, [r3, #20]
 8000dd0:	e00f      	b.n	8000df2 <CAN_Receive_IT+0x1c4>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	691a      	ldr	r2, [r3, #16]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f042 0220 	orr.w	r2, r2, #32
 8000de0:	611a      	str	r2, [r3, #16]

    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	695a      	ldr	r2, [r3, #20]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0210 	bic.w	r2, r2, #16
 8000df0:	615a      	str	r2, [r3, #20]
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b22      	cmp	r3, #34	; 0x22
 8000dfc:	d107      	bne.n	8000e0e <CAN_Receive_IT+0x1e0>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	695a      	ldr	r2, [r3, #20]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000e0c:	615a      	str	r2, [r3, #20]
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }

  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b32      	cmp	r3, #50	; 0x32
 8000e18:	d104      	bne.n	8000e24 <CAN_Receive_IT+0x1f6>
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2212      	movs	r2, #18
 8000e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000e22:	e003      	b.n	8000e2c <CAN_Receive_IT+0x1fe>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Receive complete callback */
  HAL_CAN_RxCpltCallback(hcan);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f003 fef7 	bl	8004c20 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4906      	ldr	r1, [pc, #24]	; (8000ecc <NVIC_EnableIRQ+0x2c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <NVIC_DisableIRQ+0x30>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	3320      	adds	r3, #32
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da0b      	bge.n	8000f30 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <NVIC_SetPriority+0x4c>)
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	3b04      	subs	r3, #4
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2e:	e009      	b.n	8000f44 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <NVIC_SetPriority+0x50>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe0:	f7ff ff90 	bl	8000f04 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff17 	bl	8000e3c <NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff2c 	bl	8000e84 <NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff1f 	bl	8000ea0 <NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff29 	bl	8000ed0 <NVIC_DisableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff94 	bl	8000fbc <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d106      	bne.n	80010bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80010ba:	e005      	b.n	80010c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80010c2:	f023 0304 	bic.w	r3, r3, #4
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010dc:	f004 fccc 	bl	8005a78 <HAL_SYSTICK_Callback>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d005      	beq.n	8001106 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2204      	movs	r2, #4
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e051      	b.n	80011aa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 020e 	bic.w	r2, r2, #14
 8001114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <HAL_DMA_Abort_IT+0xd0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d029      	beq.n	8001184 <HAL_DMA_Abort_IT+0xa0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <HAL_DMA_Abort_IT+0xd4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d022      	beq.n	8001180 <HAL_DMA_Abort_IT+0x9c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_DMA_Abort_IT+0xd8>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d01a      	beq.n	800117a <HAL_DMA_Abort_IT+0x96>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_DMA_Abort_IT+0xdc>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d012      	beq.n	8001174 <HAL_DMA_Abort_IT+0x90>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_DMA_Abort_IT+0xe0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00a      	beq.n	800116e <HAL_DMA_Abort_IT+0x8a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_DMA_Abort_IT+0xe4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d102      	bne.n	8001168 <HAL_DMA_Abort_IT+0x84>
 8001162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001166:	e00e      	b.n	8001186 <HAL_DMA_Abort_IT+0xa2>
 8001168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116c:	e00b      	b.n	8001186 <HAL_DMA_Abort_IT+0xa2>
 800116e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001172:	e008      	b.n	8001186 <HAL_DMA_Abort_IT+0xa2>
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	e005      	b.n	8001186 <HAL_DMA_Abort_IT+0xa2>
 800117a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800117e:	e002      	b.n	8001186 <HAL_DMA_Abort_IT+0xa2>
 8001180:	2310      	movs	r3, #16
 8001182:	e000      	b.n	8001186 <HAL_DMA_Abort_IT+0xa2>
 8001184:	2301      	movs	r3, #1
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_DMA_Abort_IT+0xe8>)
 8001188:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	4798      	blx	r3
    } 
  }
  return status;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020008 	.word	0x40020008
 80011b8:	4002001c 	.word	0x4002001c
 80011bc:	40020030 	.word	0x40020030
 80011c0:	40020044 	.word	0x40020044
 80011c4:	40020058 	.word	0x40020058
 80011c8:	4002006c 	.word	0x4002006c
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b08b      	sub	sp, #44	; 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
 80011f2:	e169      	b.n	80014c8 <HAL_GPIO_Init+0x2f8>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80011f4:	2201      	movs	r2, #1
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 8158 	bne.w	80014c2 <HAL_GPIO_Init+0x2f2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4a9a      	ldr	r2, [pc, #616]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d05e      	beq.n	80012da <HAL_GPIO_Init+0x10a>
 800121c:	4a98      	ldr	r2, [pc, #608]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d875      	bhi.n	800130e <HAL_GPIO_Init+0x13e>
 8001222:	4a98      	ldr	r2, [pc, #608]	; (8001484 <HAL_GPIO_Init+0x2b4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d058      	beq.n	80012da <HAL_GPIO_Init+0x10a>
 8001228:	4a96      	ldr	r2, [pc, #600]	; (8001484 <HAL_GPIO_Init+0x2b4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d86f      	bhi.n	800130e <HAL_GPIO_Init+0x13e>
 800122e:	4a96      	ldr	r2, [pc, #600]	; (8001488 <HAL_GPIO_Init+0x2b8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d052      	beq.n	80012da <HAL_GPIO_Init+0x10a>
 8001234:	4a94      	ldr	r2, [pc, #592]	; (8001488 <HAL_GPIO_Init+0x2b8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d869      	bhi.n	800130e <HAL_GPIO_Init+0x13e>
 800123a:	4a94      	ldr	r2, [pc, #592]	; (800148c <HAL_GPIO_Init+0x2bc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d04c      	beq.n	80012da <HAL_GPIO_Init+0x10a>
 8001240:	4a92      	ldr	r2, [pc, #584]	; (800148c <HAL_GPIO_Init+0x2bc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d863      	bhi.n	800130e <HAL_GPIO_Init+0x13e>
 8001246:	4a92      	ldr	r2, [pc, #584]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d046      	beq.n	80012da <HAL_GPIO_Init+0x10a>
 800124c:	4a90      	ldr	r2, [pc, #576]	; (8001490 <HAL_GPIO_Init+0x2c0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d85d      	bhi.n	800130e <HAL_GPIO_Init+0x13e>
 8001252:	2b12      	cmp	r3, #18
 8001254:	d82a      	bhi.n	80012ac <HAL_GPIO_Init+0xdc>
 8001256:	2b12      	cmp	r3, #18
 8001258:	d859      	bhi.n	800130e <HAL_GPIO_Init+0x13e>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <HAL_GPIO_Init+0x90>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	080012db 	.word	0x080012db
 8001264:	080012b5 	.word	0x080012b5
 8001268:	080012c7 	.word	0x080012c7
 800126c:	08001309 	.word	0x08001309
 8001270:	0800130f 	.word	0x0800130f
 8001274:	0800130f 	.word	0x0800130f
 8001278:	0800130f 	.word	0x0800130f
 800127c:	0800130f 	.word	0x0800130f
 8001280:	0800130f 	.word	0x0800130f
 8001284:	0800130f 	.word	0x0800130f
 8001288:	0800130f 	.word	0x0800130f
 800128c:	0800130f 	.word	0x0800130f
 8001290:	0800130f 	.word	0x0800130f
 8001294:	0800130f 	.word	0x0800130f
 8001298:	0800130f 	.word	0x0800130f
 800129c:	0800130f 	.word	0x0800130f
 80012a0:	0800130f 	.word	0x0800130f
 80012a4:	080012bd 	.word	0x080012bd
 80012a8:	080012d1 	.word	0x080012d1
 80012ac:	4a79      	ldr	r2, [pc, #484]	; (8001494 <HAL_GPIO_Init+0x2c4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d013      	beq.n	80012da <HAL_GPIO_Init+0x10a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012b2:	e02c      	b.n	800130e <HAL_GPIO_Init+0x13e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	623b      	str	r3, [r7, #32]
          break;
 80012ba:	e029      	b.n	8001310 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	3304      	adds	r3, #4
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e024      	b.n	8001310 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	3308      	adds	r3, #8
 80012cc:	623b      	str	r3, [r7, #32]
          break;
 80012ce:	e01f      	b.n	8001310 <HAL_GPIO_Init+0x140>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	330c      	adds	r3, #12
 80012d6:	623b      	str	r3, [r7, #32]
          break;
 80012d8:	e01a      	b.n	8001310 <HAL_GPIO_Init+0x140>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012e2:	2304      	movs	r3, #4
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e013      	b.n	8001310 <HAL_GPIO_Init+0x140>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	611a      	str	r2, [r3, #16]
          break;
 80012fa:	e009      	b.n	8001310 <HAL_GPIO_Init+0x140>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012fc:	2308      	movs	r3, #8
 80012fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	615a      	str	r2, [r3, #20]
          break;
 8001306:	e003      	b.n	8001310 <HAL_GPIO_Init+0x140>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
          break;
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x140>
          break;
 800130e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2bff      	cmp	r3, #255	; 0xff
 8001314:	d801      	bhi.n	800131a <HAL_GPIO_Init+0x14a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	e001      	b.n	800131e <HAL_GPIO_Init+0x14e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3304      	adds	r3, #4
 800131e:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2bff      	cmp	r3, #255	; 0xff
 8001324:	d802      	bhi.n	800132c <HAL_GPIO_Init+0x15c>
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x162>
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	3b08      	subs	r3, #8
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	210f      	movs	r1, #15
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	6a39      	ldr	r1, [r7, #32]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	431a      	orrs	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80b1 	beq.w	80014c2 <HAL_GPIO_Init+0x2f2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b4a      	ldr	r3, [pc, #296]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8001378:	4a48      	ldr	r2, [pc, #288]	; (800149c <HAL_GPIO_Init+0x2cc>)
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4013      	ands	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a40      	ldr	r2, [pc, #256]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d013      	beq.n	80013cc <HAL_GPIO_Init+0x1fc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <HAL_GPIO_Init+0x2d4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d00d      	beq.n	80013c8 <HAL_GPIO_Init+0x1f8>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <HAL_GPIO_Init+0x2d8>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d007      	beq.n	80013c4 <HAL_GPIO_Init+0x1f4>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d101      	bne.n	80013c0 <HAL_GPIO_Init+0x1f0>
 80013bc:	2303      	movs	r3, #3
 80013be:	e006      	b.n	80013ce <HAL_GPIO_Init+0x1fe>
 80013c0:	2304      	movs	r3, #4
 80013c2:	e004      	b.n	80013ce <HAL_GPIO_Init+0x1fe>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e002      	b.n	80013ce <HAL_GPIO_Init+0x1fe>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <HAL_GPIO_Init+0x1fe>
 80013cc:	2300      	movs	r3, #0
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	f002 0203 	and.w	r2, r2, #3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	4093      	lsls	r3, r2
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	4313      	orrs	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80013de:	492f      	ldr	r1, [pc, #188]	; (800149c <HAL_GPIO_Init+0x2cc>)
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_GPIO_Init+0x236>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	492c      	ldr	r1, [pc, #176]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x244>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	43db      	mvns	r3, r3
 800140e:	4928      	ldr	r1, [pc, #160]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001410:	4013      	ands	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <HAL_GPIO_Init+0x25e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001420:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4922      	ldr	r1, [pc, #136]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x26c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	43db      	mvns	r3, r3
 8001436:	491e      	ldr	r1, [pc, #120]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001438:	4013      	ands	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_GPIO_Init+0x286>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001448:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	4918      	ldr	r1, [pc, #96]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	608b      	str	r3, [r1, #8]
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x294>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	43db      	mvns	r3, r3
 800145e:	4914      	ldr	r1, [pc, #80]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001460:	4013      	ands	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d021      	beq.n	80014b4 <HAL_GPIO_Init+0x2e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	490e      	ldr	r1, [pc, #56]	; (80014b0 <HAL_GPIO_Init+0x2e0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	60cb      	str	r3, [r1, #12]
 800147c:	e021      	b.n	80014c2 <HAL_GPIO_Init+0x2f2>
 800147e:	bf00      	nop
 8001480:	10320000 	.word	0x10320000
 8001484:	10310000 	.word	0x10310000
 8001488:	10220000 	.word	0x10220000
 800148c:	10210000 	.word	0x10210000
 8001490:	10120000 	.word	0x10120000
 8001494:	10110000 	.word	0x10110000
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	40011000 	.word	0x40011000
 80014ac:	40011400 	.word	0x40011400
 80014b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_GPIO_Init+0x30c>)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <HAL_GPIO_Init+0x30c>)
 80014be:	4013      	ands	r3, r2
 80014c0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f ae92 	bls.w	80011f4 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	372c      	adds	r7, #44	; 0x2c
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f6:	887a      	ldrh	r2, [r7, #2]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fe:	887b      	ldrh	r3, [r7, #2]
 8001500:	041a      	lsls	r2, r3, #16
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	611a      	str	r2, [r3, #16]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	4013      	ands	r3, r2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fa94 	bl	8005a5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0f3      	b.n	8001742 <HAL_I2C_Init+0x202>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f8f6 	bl	8001760 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2224      	movs	r2, #36	; 0x24
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800158c:	f001 ff02 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8001590:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4a6d      	ldr	r2, [pc, #436]	; (800174c <HAL_I2C_Init+0x20c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d807      	bhi.n	80015ac <HAL_I2C_Init+0x6c>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4a6c      	ldr	r2, [pc, #432]	; (8001750 <HAL_I2C_Init+0x210>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf94      	ite	ls
 80015a4:	2301      	movls	r3, #1
 80015a6:	2300      	movhi	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	e006      	b.n	80015ba <HAL_I2C_Init+0x7a>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4a69      	ldr	r2, [pc, #420]	; (8001754 <HAL_I2C_Init+0x214>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	bf94      	ite	ls
 80015b4:	2301      	movls	r3, #1
 80015b6:	2300      	movhi	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0bf      	b.n	8001742 <HAL_I2C_Init+0x202>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4a64      	ldr	r2, [pc, #400]	; (8001758 <HAL_I2C_Init+0x218>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a5c      	ldr	r2, [pc, #368]	; (800174c <HAL_I2C_Init+0x20c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d802      	bhi.n	80015e6 <HAL_I2C_Init+0xa6>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	e009      	b.n	80015fa <HAL_I2C_Init+0xba>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	4a5a      	ldr	r2, [pc, #360]	; (800175c <HAL_I2C_Init+0x21c>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	099b      	lsrs	r3, r3, #6
 80015f8:	3301      	adds	r3, #1
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a51      	ldr	r2, [pc, #324]	; (800174c <HAL_I2C_Init+0x20c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d819      	bhi.n	800163e <HAL_I2C_Init+0xfe>
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800161e:	4013      	ands	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00a      	beq.n	800163a <HAL_I2C_Init+0xfa>
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1e5a      	subs	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	e051      	b.n	80016de <HAL_I2C_Init+0x19e>
 800163a:	2304      	movs	r3, #4
 800163c:	e04f      	b.n	80016de <HAL_I2C_Init+0x19e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d111      	bne.n	800166a <HAL_I2C_Init+0x12a>
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1e59      	subs	r1, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	fbb1 f3f3 	udiv	r3, r1, r3
 8001658:	3301      	adds	r3, #1
 800165a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	bf0c      	ite	eq
 8001662:	2301      	moveq	r3, #1
 8001664:	2300      	movne	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	e012      	b.n	8001690 <HAL_I2C_Init+0x150>
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1e59      	subs	r1, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009a      	lsls	r2, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001680:	3301      	adds	r3, #1
 8001682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf0c      	ite	eq
 800168a:	2301      	moveq	r3, #1
 800168c:	2300      	movne	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_I2C_Init+0x158>
 8001694:	2301      	movs	r3, #1
 8001696:	e022      	b.n	80016de <HAL_I2C_Init+0x19e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10e      	bne.n	80016be <HAL_I2C_Init+0x17e>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	1e59      	subs	r1, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016bc:	e00f      	b.n	80016de <HAL_I2C_Init+0x19e>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	1e59      	subs	r1, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	009a      	lsls	r2, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69d9      	ldr	r1, [r3, #28]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6919      	ldr	r1, [r3, #16]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6959      	ldr	r1, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699a      	ldr	r2, [r3, #24]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	001e847f 	.word	0x001e847f
 8001754:	003d08ff 	.word	0x003d08ff
 8001758:	431bde83 	.word	0x431bde83
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
	...

08001774 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	617b      	str	r3, [r7, #20]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	60fb      	str	r3, [r7, #12]

  uint32_t CurrentMode  = hi2c->Mode;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800179a:	b2db      	uxtb	r3, r3
 800179c:	60bb      	str	r3, [r7, #8]

  /* Master or Memory mode selected */
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b10      	cmp	r3, #16
 80017a2:	d002      	beq.n	80017aa <HAL_I2C_EV_IRQHandler+0x36>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b40      	cmp	r3, #64	; 0x40
 80017a8:	d172      	bne.n	8001890 <HAL_I2C_EV_IRQHandler+0x11c>
  {
    /* SB Set ----------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_I2C_EV_IRQHandler+0x52>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_I2C_EV_IRQHandler+0x52>
    {
      I2C_Master_SB(hi2c);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 fcb8 	bl	8002134 <I2C_Master_SB>
 80017c4:	e01a      	b.n	80017fc <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4b65      	ldr	r3, [pc, #404]	; (8001960 <HAL_I2C_EV_IRQHandler+0x1ec>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x6e>
    {
      I2C_Master_ADD10(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fd16 	bl	800220c <I2C_Master_ADD10>
 80017e0:	e00c      	b.n	80017fc <HAL_I2C_EV_IRQHandler+0x88>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <HAL_I2C_EV_IRQHandler+0x1f0>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <HAL_I2C_EV_IRQHandler+0x88>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_I2C_EV_IRQHandler+0x88>
    {
      I2C_Master_ADDR(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fd18 	bl	800222c <I2C_Master_ADDR>
    }

    /* I2C in mode Transmitter -----------------------------------------------*/
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <HAL_I2C_EV_IRQHandler+0x1f4>)
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d022      	beq.n	800184c <HAL_I2C_EV_IRQHandler+0xd8>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4b58      	ldr	r3, [pc, #352]	; (800196c <HAL_I2C_EV_IRQHandler+0x1f8>)
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00d      	beq.n	800182c <HAL_I2C_EV_IRQHandler+0xb8>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_I2C_EV_IRQHandler+0xb8>
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <HAL_I2C_EV_IRQHandler+0xb8>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f9b9 	bl	8001b9c <I2C_MasterTransmit_TXE>
 800182a:	e030      	b.n	800188e <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 808f 	beq.w	8001956 <HAL_I2C_EV_IRQHandler+0x1e2>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8089 	beq.w	8001956 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fa9e 	bl	8001d86 <I2C_MasterTransmit_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800184a:	e084      	b.n	8001956 <HAL_I2C_EV_IRQHandler+0x1e2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_I2C_EV_IRQHandler+0x200>)
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <HAL_I2C_EV_IRQHandler+0xfe>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_I2C_EV_IRQHandler+0xfe>
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <HAL_I2C_EV_IRQHandler+0xfe>
      {
        I2C_MasterReceive_RXNE(hi2c);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 fb00 	bl	8001e70 <I2C_MasterReceive_RXNE>
 8001870:	e00d      	b.n	800188e <HAL_I2C_EV_IRQHandler+0x11a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d06c      	beq.n	8001956 <HAL_I2C_EV_IRQHandler+0x1e2>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001882:	2b00      	cmp	r3, #0
 8001884:	d067      	beq.n	8001956 <HAL_I2C_EV_IRQHandler+0x1e2>
      {
        I2C_MasterReceive_BTF(hi2c);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fb93 	bl	8001fb2 <I2C_MasterReceive_BTF>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800188c:	e063      	b.n	8001956 <HAL_I2C_EV_IRQHandler+0x1e2>
 800188e:	e062      	b.n	8001956 <HAL_I2C_EV_IRQHandler+0x1e2>
  }
  /* Slave mode selected */
  else
  {
    /* ADDR set --------------------------------------------------------------*/
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_I2C_EV_IRQHandler+0x1f0>)
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_I2C_EV_IRQHandler+0x138>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_I2C_EV_IRQHandler+0x138>
    {
      I2C_Slave_ADDR(hi2c);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fee8 	bl	800267a <I2C_Slave_ADDR>
 80018aa:	e055      	b.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_I2C_EV_IRQHandler+0x204>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <HAL_I2C_EV_IRQHandler+0x154>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_I2C_EV_IRQHandler+0x154>
    {
      I2C_Slave_STOPF(hi2c);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 ff05 	bl	80026d0 <I2C_Slave_STOPF>
 80018c6:	e047      	b.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_I2C_EV_IRQHandler+0x1f4>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d020      	beq.n	8001914 <HAL_I2C_EV_IRQHandler+0x1a0>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_I2C_EV_IRQHandler+0x1f8>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0x184>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0x184>
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <HAL_I2C_EV_IRQHandler+0x184>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fe08 	bl	8002506 <I2C_SlaveTransmit_TXE>
 80018f6:	e02f      	b.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d02a      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001908:	2b00      	cmp	r3, #0
 800190a:	d025      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fe37 	bl	8002580 <I2C_SlaveTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 8001912:	e021      	b.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_I2C_EV_IRQHandler+0x200>)
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00d      	beq.n	800193a <HAL_I2C_EV_IRQHandler+0x1c6>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d008      	beq.n	800193a <HAL_I2C_EV_IRQHandler+0x1c6>
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <HAL_I2C_EV_IRQHandler+0x1c6>
        I2C_SlaveReceive_RXNE(hi2c);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fe43 	bl	80025be <I2C_SlaveReceive_RXNE>
 8001938:	e00e      	b.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_I2C_EV_IRQHandler+0x1fc>)
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
        I2C_SlaveReceive_BTF(hi2c);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fe73 	bl	800263a <I2C_SlaveReceive_BTF>
}
 8001954:	e000      	b.n	8001958 <HAL_I2C_EV_IRQHandler+0x1e4>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001956:	bf00      	nop
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	00010008 	.word	0x00010008
 8001964:	00010002 	.word	0x00010002
 8001968:	00100004 	.word	0x00100004
 800196c:	00010080 	.word	0x00010080
 8001970:	00010004 	.word	0x00010004
 8001974:	00010040 	.word	0x00010040
 8001978:	00010010 	.word	0x00010010

0800197c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, tmp4 = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60bb      	str	r3, [r7, #8]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <HAL_I2C_ER_IRQHandler+0x160>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d017      	beq.n	80019de <HAL_I2C_ER_IRQHandler+0x62>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d012      	beq.n	80019de <HAL_I2C_ER_IRQHandler+0x62>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80019cc:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 3381 	and.w	r3, r3, #66048	; 0x10200
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00f      	beq.n	8001a08 <HAL_I2C_ER_IRQHandler+0x8c>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00a      	beq.n	8001a08 <HAL_I2C_ER_IRQHandler+0x8c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001a06:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 3382 	and.w	r3, r3, #66560	; 0x10400
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d044      	beq.n	8001a9c <HAL_I2C_ER_IRQHandler+0x120>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d03f      	beq.n	8001a9c <HAL_I2C_ER_IRQHandler+0x120>
  {
    tmp1 = hi2c->Mode;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	61fb      	str	r3, [r7, #28]
    tmp2 = hi2c->XferCount;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	61bb      	str	r3, [r7, #24]
    tmp3 = hi2c->State;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	617b      	str	r3, [r7, #20]
    tmp4 = hi2c->PreviousState;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	613b      	str	r3, [r7, #16]
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d112      	bne.n	8001a6a <HAL_I2C_ER_IRQHandler+0xee>
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_I2C_ER_IRQHandler+0xee>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b21      	cmp	r3, #33	; 0x21
 8001a4e:	d008      	beq.n	8001a62 <HAL_I2C_ER_IRQHandler+0xe6>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b29      	cmp	r3, #41	; 0x29
 8001a54:	d005      	beq.n	8001a62 <HAL_I2C_ER_IRQHandler+0xe6>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b28      	cmp	r3, #40	; 0x28
 8001a5a:	d106      	bne.n	8001a6a <HAL_I2C_ER_IRQHandler+0xee>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	2b21      	cmp	r3, #33	; 0x21
 8001a60:	d103      	bne.n	8001a6a <HAL_I2C_ER_IRQHandler+0xee>
    {
      I2C_Slave_AF(hi2c);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fefa 	bl	800285c <I2C_Slave_AF>
 8001a68:	e018      	b.n	8001a9c <HAL_I2C_ER_IRQHandler+0x120>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f043 0204 	orr.w	r2, r3, #4
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d107      	bne.n	8001a92 <HAL_I2C_ER_IRQHandler+0x116>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a90:	601a      	str	r2, [r3, #0]
      }

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a9a:	615a      	str	r2, [r3, #20]
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 3384 	and.w	r3, r3, #67584	; 0x10800
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00f      	beq.n	8001ac6 <HAL_I2C_ER_IRQHandler+0x14a>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00a      	beq.n	8001ac6 <HAL_I2C_ER_IRQHandler+0x14a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f043 0208 	orr.w	r2, r3, #8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001ac4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <HAL_I2C_ER_IRQHandler+0x158>
  {
    I2C_ITError(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 ff36 	bl	8002940 <I2C_ITError>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	00010100 	.word	0x00010100

08001ae0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback can be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback can be implemented in the user file
   */
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback can be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback can be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr

08001b42 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback can be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback can be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback can be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback can be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t CurrentMode        = hi2c->Mode;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	613b      	str	r3, [r7, #16]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	60fb      	str	r3, [r7, #12]

  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d150      	bne.n	8001c68 <I2C_MasterTransmit_TXE+0xcc>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b21      	cmp	r3, #33	; 0x21
 8001bca:	d14d      	bne.n	8001c68 <I2C_MasterTransmit_TXE+0xcc>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d01d      	beq.n	8001c0e <I2C_MasterTransmit_TXE+0x72>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d01a      	beq.n	8001c0e <I2C_MasterTransmit_TXE+0x72>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bde:	d016      	beq.n	8001c0e <I2C_MasterTransmit_TXE+0x72>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001bee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2211      	movs	r2, #17
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ff6a 	bl	8001ae0 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c0c:	e0b6      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c1c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d107      	bne.n	8001c58 <I2C_MasterTransmit_TXE+0xbc>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff7f 	bl	8001b54 <HAL_I2C_MemTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c56:	e091      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff3d 	bl	8001ae0 <HAL_I2C_MasterTxCpltCallback>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c66:	e089      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
      }
    }
  }
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b21      	cmp	r3, #33	; 0x21
 8001c6c:	d006      	beq.n	8001c7c <I2C_MasterTransmit_TXE+0xe0>
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b40      	cmp	r3, #64	; 0x40
 8001c72:	f040 8083 	bne.w	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b22      	cmp	r3, #34	; 0x22
 8001c7a:	d17f      	bne.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
  {
    if(hi2c->XferCount == 0U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d108      	bne.n	8001c98 <I2C_MasterTransmit_TXE+0xfc>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	e071      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
    }
    else
    {
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d15b      	bne.n	8001d5c <I2C_MasterTransmit_TXE+0x1c0>
      {
        if(hi2c->EventCount == 0)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d11d      	bne.n	8001ce8 <I2C_MasterTransmit_TXE+0x14c>
        {
          /* If Memory address size is 8Bit */
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d10b      	bne.n	8001ccc <I2C_MasterTransmit_TXE+0x130>
          {
            /* Send Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount += 2;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc4:	1c9a      	adds	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	651a      	str	r2, [r3, #80]	; 0x50
 8001cca:	e057      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
          }
          /* If Memory address size is 16Bit */
          else
          {
            /* Send MSB of Memory Address */
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	121b      	asrs	r3, r3, #8
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]
            
            hi2c->EventCount++;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce6:	e049      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
          }
        }
        else if(hi2c->EventCount == 1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d10b      	bne.n	8001d08 <I2C_MasterTransmit_TXE+0x16c>
        {
          /* Send LSB of Memory Address */
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	611a      	str	r2, [r3, #16]
          
          hi2c->EventCount++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	651a      	str	r2, [r3, #80]	; 0x50
 8001d06:	e039      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
        }
        else if(hi2c->EventCount == 2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d135      	bne.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
        {
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b22      	cmp	r3, #34	; 0x22
 8001d1a:	d108      	bne.n	8001d2e <I2C_MasterTransmit_TXE+0x192>
          {
            /* Generate Restart */
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e026      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
          }
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b21      	cmp	r3, #33	; 0x21
 8001d38:	d120      	bne.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
          {
            /* Write data to DR */
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	1c59      	adds	r1, r3, #1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6251      	str	r1, [r2, #36]	; 0x24
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]
            hi2c->XferCount--;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d5a:	e00f      	b.n	8001d7c <I2C_MasterTransmit_TXE+0x1e0>
        }
      }
      else
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c59      	adds	r1, r3, #1
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6251      	str	r1, [r2, #36]	; 0x24
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      }
    }
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	60fb      	str	r3, [r7, #12]

  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b21      	cmp	r3, #33	; 0x21
 8001d9e:	d162      	bne.n	8001e66 <I2C_MasterTransmit_BTF+0xe0>
  {    
    if(hi2c->XferCount != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d010      	beq.n	8001dcc <I2C_MasterTransmit_BTF+0x46>
    {
      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	1c59      	adds	r1, r3, #1
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6251      	str	r1, [r2, #36]	; 0x24
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dca:	e04c      	b.n	8001e66 <I2C_MasterTransmit_BTF+0xe0>
    }
    else
    {
      /* Call TxCpltCallback() directly if no stop mode is set */
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d01d      	beq.n	8001e0e <I2C_MasterTransmit_BTF+0x88>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d01a      	beq.n	8001e0e <I2C_MasterTransmit_BTF+0x88>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dde:	d016      	beq.n	8001e0e <I2C_MasterTransmit_BTF+0x88>
      {
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001dee:	605a      	str	r2, [r3, #4]
        
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2211      	movs	r2, #17
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fe6a 	bl	8001ae0 <HAL_I2C_MasterTxCpltCallback>
 8001e0c:	e02b      	b.n	8001e66 <I2C_MasterTransmit_BTF+0xe0>
      }
      else /* Generate Stop condition then Call TxCpltCallback() */
      {
        /* Disable EVT, BUF and ERR interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e1c:	605a      	str	r2, [r3, #4]
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2c:	601a      	str	r2, [r3, #0]
        
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b40      	cmp	r3, #64	; 0x40
 8001e46:	d107      	bne.n	8001e58 <I2C_MasterTransmit_BTF+0xd2>
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fe7f 	bl	8001b54 <HAL_I2C_MemTxCpltCallback>
 8001e56:	e006      	b.n	8001e66 <I2C_MasterTransmit_BTF+0xe0>
        }
        else
        {
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fe3d 	bl	8001ae0 <HAL_I2C_MasterTxCpltCallback>
        }
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b22      	cmp	r3, #34	; 0x22
 8001e82:	f040 8091 	bne.w	8001fa8 <I2C_MasterReceive_RXNE+0x138>
  {
    uint32_t tmp = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
    
    tmp = hi2c->XferCount;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	60fb      	str	r3, [r7, #12]
    if(tmp > 3U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d911      	bls.n	8001ebc <I2C_MasterReceive_RXNE+0x4c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6918      	ldr	r0, [r3, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6251      	str	r1, [r2, #36]	; 0x24
 8001ea8:	b2c2      	uxtb	r2, r0
 8001eaa:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001eba:	e075      	b.n	8001fa8 <I2C_MasterReceive_RXNE+0x138>
    }
    else if((tmp == 2U) || (tmp == 3U))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d002      	beq.n	8001ec8 <I2C_MasterReceive_RXNE+0x58>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d125      	bne.n	8001f14 <I2C_MasterReceive_RXNE+0xa4>
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d010      	beq.n	8001ef2 <I2C_MasterReceive_RXNE+0x82>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ede:	601a      	str	r2, [r3, #0]
        
        /* Enable Pos */
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e007      	b.n	8001f02 <I2C_MasterReceive_RXNE+0x92>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f00:	601a      	str	r2, [r3, #0]
      }
      
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	e049      	b.n	8001fa8 <I2C_MasterReceive_RXNE+0x138>
    }
    else
    {
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d008      	beq.n	8001f2e <I2C_MasterReceive_RXNE+0xbe>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e007      	b.n	8001f3e <I2C_MasterReceive_RXNE+0xce>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f3c:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f4c:	605a      	str	r2, [r3, #4]
      
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6918      	ldr	r0, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	1c59      	adds	r1, r3, #1
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f5e:	b2c2      	uxtb	r2, r0
 8001f60:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30

      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b40      	cmp	r3, #64	; 0x40
 8001f88:	d107      	bne.n	8001f9a <I2C_MasterReceive_RXNE+0x12a>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fde7 	bl	8001b66 <HAL_I2C_MemRxCpltCallback>
 8001f98:	e006      	b.n	8001fa8 <I2C_MasterReceive_RXNE+0x138>
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fda5 	bl	8001af2 <HAL_I2C_MasterRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount == 3U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d123      	bne.n	8002012 <I2C_MasterReceive_BTF+0x60>
  {
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d006      	beq.n	8001fde <I2C_MasterReceive_BTF+0x2c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d003      	beq.n	8001fde <I2C_MasterReceive_BTF+0x2c>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fdc:	d107      	bne.n	8001fee <I2C_MasterReceive_BTF+0x3c>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fec:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6918      	ldr	r0, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	1c59      	adds	r1, r3, #1
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6251      	str	r1, [r2, #36]	; 0x24
 8001ffe:	b2c2      	uxtb	r2, r0
 8002000:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002010:	e08b      	b.n	800212a <I2C_MasterReceive_BTF+0x178>
  }
  else if(hi2c->XferCount == 2U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d175      	bne.n	8002108 <I2C_MasterReceive_BTF+0x156>
  {
    /* Prepare next transfer or stop current transfer */
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d023      	beq.n	800206a <I2C_MasterReceive_BTF+0xb8>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2b08      	cmp	r3, #8
 8002026:	d020      	beq.n	800206a <I2C_MasterReceive_BTF+0xb8>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800202e:	d01c      	beq.n	800206a <I2C_MasterReceive_BTF+0xb8>
    {
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d008      	beq.n	8002048 <I2C_MasterReceive_BTF+0x96>
      {
        /* Disable Acknowledge */
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <I2C_MasterReceive_BTF+0xa6>
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002056:	601a      	str	r2, [r3, #0]
      }

      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	e00f      	b.n	800208a <I2C_MasterReceive_BTF+0xd8>
    }
    else
    {
      /* Disable EVT and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002078:	605a      	str	r2, [r3, #4]
      
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002088:	601a      	str	r2, [r3, #0]
    }

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6918      	ldr	r0, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c59      	adds	r1, r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6251      	str	r1, [r2, #36]	; 0x24
 800209a:	b2c2      	uxtb	r2, r0
 800209c:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6918      	ldr	r0, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6251      	str	r1, [r2, #36]	; 0x24
 80020bc:	b2c2      	uxtb	r2, r0
 80020be:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	631a      	str	r2, [r3, #48]	; 0x30

    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	d107      	bne.n	80020f8 <I2C_MasterReceive_BTF+0x146>
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MemRxCpltCallback(hi2c);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fd38 	bl	8001b66 <HAL_I2C_MemRxCpltCallback>
 80020f6:	e018      	b.n	800212a <I2C_MasterReceive_BTF+0x178>
    }
    else
    {
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fcf6 	bl	8001af2 <HAL_I2C_MasterRxCpltCallback>
 8002106:	e010      	b.n	800212a <I2C_MasterReceive_BTF+0x178>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6918      	ldr	r0, [r3, #16]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c59      	adds	r1, r3, #1
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6251      	str	r1, [r2, #36]	; 0x24
 8002118:	b2c2      	uxtb	r2, r0
 800211a:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b40      	cmp	r3, #64	; 0x40
 8002146:	d117      	bne.n	8002178 <I2C_Master_SB+0x44>
  {
    if(hi2c->EventCount == 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e04d      	b.n	8002200 <I2C_Master_SB+0xcc>
    }
    else
    {
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	b2da      	uxtb	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	611a      	str	r2, [r3, #16]
 8002176:	e043      	b.n	8002200 <I2C_Master_SB+0xcc>
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002180:	d119      	bne.n	80021b6 <I2C_Master_SB+0x82>
    {
      /* Send slave 7 Bits address */
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b21      	cmp	r3, #33	; 0x21
 800218c:	d109      	bne.n	80021a2 <I2C_Master_SB+0x6e>
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800219e:	611a      	str	r2, [r3, #16]
 80021a0:	e02e      	b.n	8002200 <I2C_Master_SB+0xcc>
      }
      else
      {
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	e024      	b.n	8002200 <I2C_Master_SB+0xcc>
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10e      	bne.n	80021dc <I2C_Master_SB+0xa8>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	11db      	asrs	r3, r3, #7
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f003 0306 	and.w	r3, r3, #6
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f063 030f 	orn	r3, r3, #15
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	611a      	str	r2, [r3, #16]
 80021da:	e011      	b.n	8002200 <I2C_Master_SB+0xcc>
      }
      else if(hi2c->EventCount == 1U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10d      	bne.n	8002200 <I2C_Master_SB+0xcc>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	11db      	asrs	r3, r3, #7
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	f063 030e 	orn	r3, r3, #14
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	b2da      	uxtb	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800222c:	b480      	push	{r7}
 800222e:	b091      	sub	sp, #68	; 0x44
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800223a:	b2db      	uxtb	r3, r3
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State         = hi2c->PreviousState;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	637b      	str	r3, [r7, #52]	; 0x34

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b22      	cmp	r3, #34	; 0x22
 8002254:	f040 8146 	bne.w	80024e4 <I2C_Master_ADDR+0x2b8>
  {
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10e      	bne.n	800227e <I2C_Master_ADDR+0x52>
 8002260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d10b      	bne.n	800227e <I2C_Master_ADDR+0x52>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002266:	2300      	movs	r3, #0
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	e13d      	b.n	80024fa <I2C_Master_ADDR+0x2ce>
    }
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002282:	2b00      	cmp	r3, #0
 8002284:	d11d      	bne.n	80022c2 <I2C_Master_ADDR+0x96>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800228e:	d118      	bne.n	80022c2 <I2C_Master_ADDR+0x96>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b4:	601a      	str	r2, [r3, #0]
      
      hi2c->EventCount++;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	651a      	str	r2, [r3, #80]	; 0x50
 80022c0:	e11b      	b.n	80024fa <I2C_Master_ADDR+0x2ce>
    }
    else
    {
      if(hi2c->XferCount == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d113      	bne.n	80022f4 <I2C_Master_ADDR+0xc8>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e0f3      	b.n	80024dc <I2C_Master_ADDR+0x2b0>
      }
      else if(hi2c->XferCount == 1U)   
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	f040 8082 	bne.w	8002404 <I2C_Master_ADDR+0x1d8>
      {
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002302:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002306:	d137      	bne.n	8002378 <I2C_Master_ADDR+0x14c>
        {
          /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002316:	601a      	str	r2, [r3, #0]

          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002326:	d113      	bne.n	8002350 <I2C_Master_ADDR+0x124>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	e0c5      	b.n	80024dc <I2C_Master_ADDR+0x2b0>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	623b      	str	r3, [r7, #32]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e0b1      	b.n	80024dc <I2C_Master_ADDR+0x2b0>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237a:	2b04      	cmp	r3, #4
 800237c:	d026      	beq.n	80023cc <I2C_Master_ADDR+0x1a0>
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	2b08      	cmp	r3, #8
 8002382:	d023      	beq.n	80023cc <I2C_Master_ADDR+0x1a0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	2b12      	cmp	r3, #18
 8002388:	d020      	beq.n	80023cc <I2C_Master_ADDR+0x1a0>
        {
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	2b02      	cmp	r3, #2
 8002390:	d008      	beq.n	80023a4 <I2C_Master_ADDR+0x178>
          {
            /* Disable Acknowledge */
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e007      	b.n	80023b4 <I2C_Master_ADDR+0x188>
          }
          else
          {
            /* Enable Acknowledge */
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023b2:	601a      	str	r2, [r3, #0]
          }
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	e087      	b.n	80024dc <I2C_Master_ADDR+0x2b0>
        }
        else
        {
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023da:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	69bb      	ldr	r3, [r7, #24]
          
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	e06b      	b.n	80024dc <I2C_Master_ADDR+0x2b0>
        }
      }
      else if(hi2c->XferCount == 2U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d143      	bne.n	8002496 <I2C_Master_ADDR+0x26a>
      {
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	2b02      	cmp	r3, #2
 8002414:	d01b      	beq.n	800244e <I2C_Master_ADDR+0x222>
        {
          /* Enable Pos */
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002424:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	697b      	ldr	r3, [r7, #20]
          
          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e012      	b.n	8002474 <I2C_Master_ADDR+0x248>
        }
        else
        {
          /* Enable Acknowledge */
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800245c:	601a      	str	r2, [r3, #0]
          
          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	693b      	ldr	r3, [r7, #16]
        }

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002482:	d12b      	bne.n	80024dc <I2C_Master_ADDR+0x2b0>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	e022      	b.n	80024dc <I2C_Master_ADDR+0x2b0>
        }
      }
      else
      {
        /* Enable Acknowledge */
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a4:	601a      	str	r2, [r3, #0]

        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b4:	d107      	bne.n	80024c6 <I2C_Master_ADDR+0x29a>
        {
          /* Enable Last DMA bit */
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
      }
      
      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	651a      	str	r2, [r3, #80]	; 0x50
 80024e2:	e00a      	b.n	80024fa <I2C_Master_ADDR+0x2ce>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3744      	adds	r7, #68	; 0x44
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d029      	beq.n	8002576 <I2C_SlaveTransmit_TXE+0x70>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6251      	str	r1, [r2, #36]	; 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d114      	bne.n	8002576 <I2C_SlaveTransmit_TXE+0x70>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b29      	cmp	r3, #41	; 0x29
 8002550:	d111      	bne.n	8002576 <I2C_SlaveTransmit_TXE+0x70>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	605a      	str	r2, [r3, #4]
      
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2221      	movs	r2, #33	; 0x21
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2228      	movs	r2, #40	; 0x28
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      
      /* Call the Tx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff fac7 	bl	8001b04 <HAL_I2C_SlaveTxCpltCallback>
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00f      	beq.n	80025b2 <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	1c59      	adds	r1, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6251      	str	r1, [r2, #36]	; 0x24
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	60fb      	str	r3, [r7, #12]

  if(hi2c->XferCount != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d02a      	beq.n	8002630 <I2C_SlaveReceive_RXNE+0x72>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6918      	ldr	r0, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c59      	adds	r1, r3, #1
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6251      	str	r1, [r2, #36]	; 0x24
 80025ea:	b2c2      	uxtb	r2, r0
 80025ec:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d114      	bne.n	8002630 <I2C_SlaveReceive_RXNE+0x72>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b2a      	cmp	r3, #42	; 0x2a
 800260a:	d111      	bne.n	8002630 <I2C_SlaveReceive_RXNE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2222      	movs	r2, #34	; 0x22
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2228      	movs	r2, #40	; 0x28
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the Rx complete callback to inform upper layer of the end of receive process */
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fa73 	bl	8001b16 <HAL_I2C_SlaveRxCpltCallback>
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6918      	ldr	r0, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c59      	adds	r1, r3, #1
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6251      	str	r1, [r2, #36]	; 0x24
 800265c:	b2c2      	uxtb	r2, r0
 800265e:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	81bb      	strh	r3, [r7, #12]

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b04      	cmp	r3, #4
 8002696:	d001      	beq.n	800269c <I2C_Slave_ADDR+0x22>
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b80      	cmp	r3, #128	; 0x80
 80026a8:	d003      	beq.n	80026b2 <I2C_Slave_ADDR+0x38>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	81bb      	strh	r3, [r7, #12]
 80026b0:	e002      	b.n	80026b8 <I2C_Slave_ADDR+0x3e>
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	81bb      	strh	r3, [r7, #12]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80026b8:	89ba      	ldrh	r2, [r7, #12]
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fa32 	bl	8001b28 <HAL_I2C_AddrCallback>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	60fb      	str	r3, [r7, #12]
  
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026f0:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 0201 	orr.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800272e:	d11a      	bne.n	8002766 <I2C_Slave_STOPF+0x96>
  {
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b22      	cmp	r3, #34	; 0x22
 800273a:	d005      	beq.n	8002748 <I2C_Slave_STOPF+0x78>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b2a      	cmp	r3, #42	; 0x2a
 8002746:	d107      	bne.n	8002758 <I2C_Slave_STOPF+0x88>
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002756:	e006      	b.n	8002766 <I2C_Slave_STOPF+0x96>
    }
    else
    {
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	b29a      	uxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if(hi2c->XferCount != 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d035      	beq.n	80027dc <I2C_Slave_STOPF+0x10c>
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d110      	bne.n	80027a0 <I2C_Slave_STOPF+0xd0>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6918      	ldr	r0, [r3, #16]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	1c59      	adds	r1, r3, #1
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6251      	str	r1, [r2, #36]	; 0x24
 800278e:	b2c2      	uxtb	r2, r0
 8002790:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d110      	bne.n	80027d0 <I2C_Slave_STOPF+0x100>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6918      	ldr	r0, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	1c59      	adds	r1, r3, #1
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6251      	str	r1, [r2, #36]	; 0x24
 80027be:	b2c2      	uxtb	r2, r0
 80027c0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0204 	orr.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <I2C_Slave_STOPF+0x11c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f8ab 	bl	8002940 <I2C_ITError>
 80027ea:	e02f      	b.n	800284c <I2C_Slave_STOPF+0x17c>
  }
  else
  {
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b28      	cmp	r3, #40	; 0x28
 80027f0:	d005      	beq.n	80027fe <I2C_Slave_STOPF+0x12e>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b2a      	cmp	r3, #42	; 0x2a
 80027f6:	d002      	beq.n	80027fe <I2C_Slave_STOPF+0x12e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b29      	cmp	r3, #41	; 0x29
 80027fc:	d111      	bne.n	8002822 <I2C_Slave_STOPF+0x152>
       (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
    {
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a15      	ldr	r2, [pc, #84]	; (8002858 <I2C_Slave_STOPF+0x188>)
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
      HAL_I2C_ListenCpltCallback(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff f991 	bl	8001b42 <HAL_I2C_ListenCpltCallback>
 8002820:	e014      	b.n	800284c <I2C_Slave_STOPF+0x17c>
    }
    else
    {
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	2b22      	cmp	r3, #34	; 0x22
 8002828:	d002      	beq.n	8002830 <I2C_Slave_STOPF+0x160>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b22      	cmp	r3, #34	; 0x22
 800282e:	d10d      	bne.n	800284c <I2C_Slave_STOPF+0x17c>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2220      	movs	r2, #32
 800283a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff f965 	bl	8001b16 <HAL_I2C_SlaveRxCpltCallback>
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	ffff0000 	.word	0xffff0000

0800285c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	60fb      	str	r3, [r7, #12]
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	60bb      	str	r3, [r7, #8]

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b04      	cmp	r3, #4
 8002878:	d002      	beq.n	8002880 <I2C_Slave_AF+0x24>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d129      	bne.n	80028d4 <I2C_Slave_AF+0x78>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b28      	cmp	r3, #40	; 0x28
 8002884:	d126      	bne.n	80028d4 <I2C_Slave_AF+0x78>
          (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2c      	ldr	r2, [pc, #176]	; (800293c <I2C_Slave_AF+0xe0>)
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800289a:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028a4:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b4:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff f938 	bl	8001b42 <HAL_I2C_ListenCpltCallback>
 80028d2:	e02e      	b.n	8002932 <I2C_Slave_AF+0xd6>
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b21      	cmp	r3, #33	; 0x21
 80028d8:	d126      	bne.n	8002928 <I2C_Slave_AF+0xcc>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a17      	ldr	r2, [pc, #92]	; (800293c <I2C_Slave_AF+0xe0>)
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2221      	movs	r2, #33	; 0x21
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002904:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800290e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291e:	601a      	str	r2, [r3, #0]

    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff f8ef 	bl	8001b04 <HAL_I2C_SlaveTxCpltCallback>
 8002926:	e004      	b.n	8002932 <I2C_Slave_AF+0xd6>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002930:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	ffff0000 	.word	0xffff0000

08002940 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	60fb      	str	r3, [r7, #12]

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b29      	cmp	r3, #41	; 0x29
 8002956:	d002      	beq.n	800295e <I2C_ITError+0x1e>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b2a      	cmp	r3, #42	; 0x2a
 800295c:	d107      	bne.n	800296e <I2C_ITError+0x2e>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2228      	movs	r2, #40	; 0x28
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800296c:	e018      	b.n	80029a0 <I2C_ITError+0x60>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b60      	cmp	r3, #96	; 0x60
 8002978:	d00b      	beq.n	8002992 <I2C_ITError+0x52>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002988:	d003      	beq.n	8002992 <I2C_ITError+0x52>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ae:	601a      	str	r2, [r3, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029be:	d15f      	bne.n	8002a80 <I2C_ITError+0x140>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ce:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d020      	beq.n	8002a1e <I2C_ITError+0xde>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <I2C_ITError+0x200>)
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fb7b 	bl	80010e4 <HAL_DMA_Abort_IT>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8083 	beq.w	8002afc <I2C_ITError+0x1bc>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4798      	blx	r3
 8002a1c:	e06e      	b.n	8002afc <I2C_ITError+0x1bc>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	4a47      	ldr	r2, [pc, #284]	; (8002b40 <I2C_ITError+0x200>)
 8002a24:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fb5a 	bl	80010e4 <HAL_DMA_Abort_IT>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d062      	beq.n	8002afc <I2C_ITError+0x1bc>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d109      	bne.n	8002a58 <I2C_ITError+0x118>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6918      	ldr	r0, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c59      	adds	r1, r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6251      	str	r1, [r2, #36]	; 0x24
 8002a54:	b2c2      	uxtb	r2, r0
 8002a56:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4798      	blx	r3
 8002a7e:	e03d      	b.n	8002afc <I2C_ITError+0x1bc>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b60      	cmp	r3, #96	; 0x60
 8002a8a:	d123      	bne.n	8002ad4 <I2C_ITError+0x194>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa4:	2b40      	cmp	r3, #64	; 0x40
 8002aa6:	d109      	bne.n	8002abc <I2C_ITError+0x17c>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6918      	ldr	r0, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6251      	str	r1, [r2, #36]	; 0x24
 8002ab8:	b2c2      	uxtb	r2, r0
 8002aba:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff f85c 	bl	8001b8a <HAL_I2C_AbortCpltCallback>
 8002ad2:	e013      	b.n	8002afc <I2C_ITError+0x1bc>
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d109      	bne.n	8002af6 <I2C_ITError+0x1b6>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6918      	ldr	r0, [r3, #16]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c59      	adds	r1, r3, #1
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6251      	str	r1, [r2, #36]	; 0x24
 8002af2:	b2c2      	uxtb	r2, r0
 8002af4:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff f83e 	bl	8001b78 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b28      	cmp	r3, #40	; 0x28
 8002b06:	d116      	bne.n	8002b36 <I2C_ITError+0x1f6>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d110      	bne.n	8002b36 <I2C_ITError+0x1f6>
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <I2C_ITError+0x204>)
 8002b18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff f806 	bl	8001b42 <HAL_I2C_ListenCpltCallback>
  }
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	08002b49 	.word	0x08002b49
 8002b44:	ffff0000 	.word	0xffff0000

08002b48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	60fb      	str	r3, [r7, #12]
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	2200      	movs	r2, #0
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	2200      	movs	r2, #0
 8002b7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b60      	cmp	r3, #96	; 0x60
 8002b86:	d116      	bne.n	8002bb6 <I2C_DMAAbort+0x6e>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0201 	bic.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7fe ffeb 	bl	8001b8a <HAL_I2C_AbortCpltCallback>
    __HAL_I2C_DISABLE(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
  }
}
 8002bb4:	e012      	b.n	8002bdc <I2C_DMAAbort+0x94>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7fe ffce 	bl	8001b78 <HAL_I2C_ErrorCallback>
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8087 	beq.w	8002d0c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bfe:	4b92      	ldr	r3, [pc, #584]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d00c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c0a:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_OscConfig+0x58>
 8002c16:	4b8c      	ldr	r3, [pc, #560]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d06c      	beq.n	8002d0a <HAL_RCC_OscConfig+0x126>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d168      	bne.n	8002d0a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e22d      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x70>
 8002c46:	4b80      	ldr	r3, [pc, #512]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7f      	ldr	r2, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e02e      	b.n	8002cb2 <HAL_RCC_OscConfig+0xce>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x92>
 8002c5c:	4b7a      	ldr	r3, [pc, #488]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a79      	ldr	r2, [pc, #484]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b77      	ldr	r3, [pc, #476]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a76      	ldr	r2, [pc, #472]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e01d      	b.n	8002cb2 <HAL_RCC_OscConfig+0xce>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0xb6>
 8002c80:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a70      	ldr	r2, [pc, #448]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6d      	ldr	r2, [pc, #436]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0xce>
 8002c9a:	4b6b      	ldr	r3, [pc, #428]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a67      	ldr	r2, [pc, #412]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d013      	beq.n	8002ce2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fd fa9f 	bl	80001fc <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc2:	f7fd fa9b 	bl	80001fc <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1e1      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd4:	4b5c      	ldr	r3, [pc, #368]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0xde>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fa8b 	bl	80001fc <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cea:	f7fd fa87 	bl	80001fc <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1cd      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfc:	4b52      	ldr	r3, [pc, #328]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x106>
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d063      	beq.n	8002de0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d24:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d11c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x186>
 8002d30:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3c:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_OscConfig+0x170>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e1a1      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4939      	ldr	r1, [pc, #228]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d68:	e03a      	b.n	8002de0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d020      	beq.n	8002db4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x268>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fd fa40 	bl	80001fc <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d80:	f7fd fa3c 	bl	80001fc <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e182      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4926      	ldr	r1, [pc, #152]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
 8002db2:	e015      	b.n	8002de0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db4:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <HAL_RCC_OscConfig+0x268>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fd fa1f 	bl	80001fc <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fd fa1b 	bl	80001fc <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e161      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d039      	beq.n	8002e60 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d019      	beq.n	8002e28 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fd f9ff 	bl	80001fc <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fd f9fb 	bl	80001fc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e141      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_RCC_OscConfig+0x264>)
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002e20:	2001      	movs	r0, #1
 8002e22:	f000 fadf 	bl	80033e4 <RCC_Delay>
 8002e26:	e01b      	b.n	8002e60 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2e:	f7fd f9e5 	bl	80001fc <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	e00e      	b.n	8002e54 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fd f9e1 	bl	80001fc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d907      	bls.n	8002e54 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e127      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	42420000 	.word	0x42420000
 8002e50:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1ea      	bne.n	8002e36 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80a6 	beq.w	8002fba <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e72:	4b8b      	ldr	r3, [pc, #556]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b88      	ldr	r3, [pc, #544]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a87      	ldr	r2, [pc, #540]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]
 8002e8a:	4b85      	ldr	r3, [pc, #532]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <HAL_RCC_OscConfig+0x4c0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b7f      	ldr	r3, [pc, #508]	; (80030a4 <HAL_RCC_OscConfig+0x4c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7e      	ldr	r2, [pc, #504]	; (80030a4 <HAL_RCC_OscConfig+0x4c0>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7fd f9a3 	bl	80001fc <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7fd f99f 	bl	80001fc <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	; 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0e5      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <HAL_RCC_OscConfig+0x4c0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x30a>
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6213      	str	r3, [r2, #32]
 8002eec:	e02d      	b.n	8002f4a <HAL_RCC_OscConfig+0x366>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x32c>
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a66      	ldr	r2, [pc, #408]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCC_OscConfig+0x366>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x34e>
 8002f18:	4b61      	ldr	r3, [pc, #388]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4a60      	ldr	r2, [pc, #384]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	6213      	str	r3, [r2, #32]
 8002f24:	4b5e      	ldr	r3, [pc, #376]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a5d      	ldr	r2, [pc, #372]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e00b      	b.n	8002f4a <HAL_RCC_OscConfig+0x366>
 8002f32:	4b5b      	ldr	r3, [pc, #364]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a5a      	ldr	r2, [pc, #360]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b58      	ldr	r3, [pc, #352]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d015      	beq.n	8002f7e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fd f953 	bl	80001fc <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fd f94f 	bl	80001fc <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e093      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f70:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0ee      	beq.n	8002f5a <HAL_RCC_OscConfig+0x376>
 8002f7c:	e014      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7e:	f7fd f93d 	bl	80001fc <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fd f939 	bl	80001fc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e07d      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9c:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d105      	bne.n	8002fba <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fae:	4b3c      	ldr	r3, [pc, #240]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d069      	beq.n	8003096 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc2:	4b37      	ldr	r3, [pc, #220]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d061      	beq.n	8003092 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d146      	bne.n	8003064 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fd f90e 	bl	80001fc <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fd f90a 	bl	80001fc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e050      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300a:	d108      	bne.n	800301e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4921      	ldr	r1, [pc, #132]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a19      	ldr	r1, [r3, #32]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	430b      	orrs	r3, r1
 8003030:	491b      	ldr	r1, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fd f8de 	bl	80001fc <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fd f8da 	bl	80001fc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e020      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x460>
 8003062:	e018      	b.n	8003096 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fd f8c7 	bl	80001fc <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003072:	f7fd f8c3 	bl	80001fc <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e009      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCC_OscConfig+0x4bc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x48e>
 8003090:	e001      	b.n	8003096 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42420060 	.word	0x42420060

080030ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80030ba:	4b7e      	ldr	r3, [pc, #504]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d910      	bls.n	80030ea <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c8:	4b7a      	ldr	r3, [pc, #488]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 0207 	bic.w	r2, r3, #7
 80030d0:	4978      	ldr	r1, [pc, #480]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80030d8:	4b76      	ldr	r3, [pc, #472]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e0e0      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003102:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a6c      	ldr	r2, [pc, #432]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003108:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800310c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800311a:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a66      	ldr	r2, [pc, #408]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003120:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003124:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003126:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4961      	ldr	r1, [pc, #388]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d06a      	beq.n	800321a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d107      	bne.n	800315c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314c:	4b5a      	ldr	r3, [pc, #360]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d115      	bne.n	8003184 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0a7      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d107      	bne.n	8003174 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003164:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e09b      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	4b50      	ldr	r3, [pc, #320]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e093      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003184:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 0203 	bic.w	r2, r3, #3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4949      	ldr	r1, [pc, #292]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003196:	f7fd f831 	bl	80001fc <HAL_GetTick>
 800319a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d112      	bne.n	80031ca <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a6:	f7fd f829 	bl	80001fc <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e077      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031bc:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d1ee      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xfa>
 80031c8:	e027      	b.n	800321a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d11d      	bne.n	800320e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d4:	f7fd f812 	bl	80001fc <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e060      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ea:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d1ee      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x128>
 80031f6:	e010      	b.n	800321a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f8:	f7fd f800 	bl	80001fc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e04e      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800320e:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 030c 	and.w	r3, r3, #12
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ee      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d210      	bcs.n	800324a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003228:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 0207 	bic.w	r2, r3, #7
 8003230:	4920      	ldr	r1, [pc, #128]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003238:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_RCC_ClockConfig+0x208>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e030      	b.n	80032ac <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4915      	ldr	r1, [pc, #84]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	490d      	ldr	r1, [pc, #52]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003288:	f000 f81c 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x20c>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	091b      	lsrs	r3, r3, #4
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	4908      	ldr	r1, [pc, #32]	; (80032bc <HAL_RCC_ClockConfig+0x210>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_RCC_ClockConfig+0x214>)
 80032a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80032a4:	200f      	movs	r0, #15
 80032a6:	f7fc ff67 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40021000 	.word	0x40021000
 80032bc:	08005ef4 	.word	0x08005ef4
 80032c0:	20000008 	.word	0x20000008

080032c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b490      	push	{r4, r7}
 80032c6:	b08a      	sub	sp, #40	; 0x28
 80032c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032ca:	4b29      	ldr	r3, [pc, #164]	; (8003370 <HAL_RCC_GetSysClockFreq+0xac>)
 80032cc:	1d3c      	adds	r4, r7, #4
 80032ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032d4:	f240 2301 	movw	r3, #513	; 0x201
 80032d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x40>
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x46>
 8003302:	e02b      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003304:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003306:	623b      	str	r3, [r7, #32]
      break;
 8003308:	e02b      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	0c9b      	lsrs	r3, r3, #18
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	3328      	adds	r3, #40	; 0x28
 8003314:	443b      	add	r3, r7
 8003316:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800331a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d012      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0c5b      	lsrs	r3, r3, #17
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	3328      	adds	r3, #40	; 0x28
 8003332:	443b      	add	r3, r7
 8003334:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003338:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb4>)
 800333e:	fb03 f202 	mul.w	r2, r3, r2
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	e004      	b.n	8003356 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4a0b      	ldr	r2, [pc, #44]	; (800337c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	623b      	str	r3, [r7, #32]
      break;
 800335a:	e002      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetSysClockFreq+0xb4>)
 800335e:	623b      	str	r3, [r7, #32]
      break;
 8003360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003362:	6a3b      	ldr	r3, [r7, #32]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bc90      	pop	{r4, r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	08005b78 	.word	0x08005b78
 8003374:	40021000 	.word	0x40021000
 8003378:	007a1200 	.word	0x007a1200
 800337c:	003d0900 	.word	0x003d0900

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_RCC_GetHCLKFreq+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000008 	.word	0x20000008

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff2 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}    
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	08005f04 	.word	0x08005f04

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffde 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
} 
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08005f04 	.word	0x08005f04

080033e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <RCC_Delay+0x38>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <RCC_Delay+0x3c>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a5b      	lsrs	r3, r3, #9
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8003400:	bf00      	nop
}
 8003402:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e5a      	subs	r2, r3, #1
 8003408:	60fa      	str	r2, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f8      	bne.n	8003400 <RCC_Delay+0x1c>
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000008 	.word	0x20000008
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e01d      	b.n	8003472 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f815 	bl	800347a <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f000 fac6 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0202 	mvn.w	r2, #2
 80034b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa74 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa67 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fa76 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0204 	mvn.w	r2, #4
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fa4a 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa3d 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa4c 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d122      	bne.n	8003590 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b08      	cmp	r3, #8
 8003556:	d11b      	bne.n	8003590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0208 	mvn.w	r2, #8
 8003560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2204      	movs	r2, #4
 8003566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa20 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 800357c:	e005      	b.n	800358a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa13 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fa22 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	d122      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d11b      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0210 	mvn.w	r2, #16
 80035b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2208      	movs	r2, #8
 80035ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f9f6 	bl	80039bc <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f9e9 	bl	80039aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f9f8 	bl	80039ce <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0201 	mvn.w	r2, #1
 8003608:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 fee2 	bl	80053d4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003634:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fc0d 	bl	8003e56 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003660:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f9bc 	bl	80039e0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b20      	cmp	r3, #32
 8003674:	d10e      	bne.n	8003694 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b20      	cmp	r3, #32
 8003682:	d107      	bne.n	8003694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0220 	mvn.w	r2, #32
 800368c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fbd8 	bl	8003e44 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  __HAL_LOCK(htim);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e08a      	b.n	80037cc <HAL_TIM_IC_ConfigChannel+0x130>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11b      	bne.n	8003704 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6819      	ldr	r1, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f000 f9f0 	bl	8003ac0 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 020c 	bic.w	r2, r2, #12
 80036ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6999      	ldr	r1, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	619a      	str	r2, [r3, #24]
 8003702:	e05a      	b.n	80037ba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d11c      	bne.n	8003744 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f000 fa61 	bl	8003be0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800372c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6999      	ldr	r1, [r3, #24]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	021a      	lsls	r2, r3, #8
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	619a      	str	r2, [r3, #24]
 8003742:	e03a      	b.n	80037ba <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11b      	bne.n	8003782 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f000 fab4 	bl	8003cc6 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 020c 	bic.w	r2, r2, #12
 800376c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	61da      	str	r2, [r3, #28]
 8003780:	e01b      	b.n	80037ba <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6819      	ldr	r1, [r3, #0]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f000 fad7 	bl	8003d44 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	021a      	lsls	r2, r3, #8
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIM_ConfigClockSource+0x1c>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e0d8      	b.n	80039a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800380e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003828:	d052      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0xfc>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	f200 80ae 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003836:	d027      	beq.n	8003888 <HAL_TIM_ConfigClockSource+0xb4>
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	f200 80a7 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 8003840:	2b70      	cmp	r3, #112	; 0x70
 8003842:	d02a      	beq.n	800389a <HAL_TIM_ConfigClockSource+0xc6>
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	f200 80a2 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 800384a:	2b60      	cmp	r3, #96	; 0x60
 800384c:	d063      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x142>
 800384e:	2b60      	cmp	r3, #96	; 0x60
 8003850:	f200 809d 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d04e      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x122>
 8003858:	2b50      	cmp	r3, #80	; 0x50
 800385a:	f200 8098 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d069      	beq.n	8003936 <HAL_TIM_ConfigClockSource+0x162>
 8003862:	2b40      	cmp	r3, #64	; 0x40
 8003864:	f200 8093 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	f000 8089 	beq.w	8003980 <HAL_TIM_ConfigClockSource+0x1ac>
 800386e:	2b30      	cmp	r3, #48	; 0x30
 8003870:	f200 808d 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 8003874:	2b20      	cmp	r3, #32
 8003876:	d07c      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x19e>
 8003878:	2b20      	cmp	r3, #32
 800387a:	f200 8088 	bhi.w	800398e <HAL_TIM_ConfigClockSource+0x1ba>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d069      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0x182>
 8003882:	2b10      	cmp	r3, #16
 8003884:	d06e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8003886:	e082      	b.n	800398e <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0207 	bic.w	r2, r2, #7
 8003896:	609a      	str	r2, [r3, #8]
    break;
 8003898:	e07a      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f000 faaa 	bl	8003e02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	609a      	str	r2, [r3, #8]
    break;
 80038ce:	e05f      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6899      	ldr	r1, [r3, #8]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f000 fa8f 	bl	8003e02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f2:	609a      	str	r2, [r3, #8]
    break;
 80038f4:	e04c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	461a      	mov	r2, r3
 8003904:	f000 f93a 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2150      	movs	r1, #80	; 0x50
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fa58 	bl	8003dc4 <TIM_ITRx_SetConfig>
    break;
 8003914:	e03c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	461a      	mov	r2, r3
 8003924:	f000 f99c 	bl	8003c60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2160      	movs	r1, #96	; 0x60
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fa48 	bl	8003dc4 <TIM_ITRx_SetConfig>
    break;
 8003934:	e02c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	461a      	mov	r2, r3
 8003944:	f000 f91a 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2140      	movs	r1, #64	; 0x40
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fa38 	bl	8003dc4 <TIM_ITRx_SetConfig>
    break;
 8003954:	e01c      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fa31 	bl	8003dc4 <TIM_ITRx_SetConfig>
    break;
 8003962:	e015      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2110      	movs	r1, #16
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fa2a 	bl	8003dc4 <TIM_ITRx_SetConfig>
    break;
 8003970:	e00e      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2120      	movs	r1, #32
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fa23 	bl	8003dc4 <TIM_ITRx_SetConfig>
    break;
 800397e:	e007      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2130      	movs	r1, #48	; 0x30
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fa1c 	bl	8003dc4 <TIM_ITRx_SetConfig>
    break;
 800398c:	e000      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 800398e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bc80      	pop	{r7}
 80039cc:	4770      	bx	lr

080039ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
	...

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a2a      	ldr	r2, [pc, #168]	; (8003ab4 <TIM_Base_SetConfig+0xc0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0x34>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0x34>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <TIM_Base_SetConfig+0xc4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0x34>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <TIM_Base_SetConfig+0xc8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <TIM_Base_SetConfig+0xc0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <TIM_Base_SetConfig+0x66>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d007      	beq.n	8003a5a <TIM_Base_SetConfig+0x66>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	; (8003ab8 <TIM_Base_SetConfig+0xc4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d003      	beq.n	8003a5a <TIM_Base_SetConfig+0x66>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <TIM_Base_SetConfig+0xc8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d108      	bne.n	8003a6c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a07      	ldr	r2, [pc, #28]	; (8003ab4 <TIM_Base_SetConfig+0xc0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d103      	bne.n	8003aa4 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	615a      	str	r2, [r3, #20]
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800

08003ac0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <TIM_TI1_SetConfig+0xb0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_TI1_SetConfig+0x4e>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afc:	d007      	beq.n	8003b0e <TIM_TI1_SetConfig+0x4e>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_TI1_SetConfig+0xb4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_TI1_SetConfig+0x4e>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <TIM_TI1_SetConfig+0xb8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <TIM_TI1_SetConfig+0x52>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <TIM_TI1_SetConfig+0x54>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e003      	b.n	8003b32 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f023 030a 	bic.w	r3, r3, #10
 8003b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 030a 	and.w	r3, r3, #10
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	621a      	str	r2, [r3, #32]
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800

08003b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f023 030a 	bic.w	r3, r3, #10
 8003bc0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f023 0210 	bic.w	r2, r3, #16
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	021b      	lsls	r3, r3, #8
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	031b      	lsls	r3, r3, #12
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f023 0210 	bic.w	r2, r3, #16
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	031b      	lsls	r3, r3, #12
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	031b      	lsls	r3, r3, #12
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	031b      	lsls	r3, r3, #12
 8003da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	f043 0307 	orr.w	r3, r3, #7
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	609a      	str	r2, [r3, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	60f8      	str	r0, [r7, #12]
 8003e0a:	60b9      	str	r1, [r7, #8]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	021a      	lsls	r2, r3, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	609a      	str	r2, [r3, #8]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e03f      	b.n	8003efa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f837 	bl	8003f02 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eaa:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fb95 	bl	80045dc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed0:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ee0:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	f040 8083 	bne.w	800403c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_UART_Transmit+0x2e>
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07b      	b.n	800403e <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_UART_Transmit+0x40>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e074      	b.n	800403e <HAL_UART_Transmit+0x12a>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2221      	movs	r2, #33	; 0x21
 8003f66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003f6a:	f7fc f947 	bl	80001fc <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003f7c:	e042      	b.n	8004004 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d122      	bne.n	8003fdc <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2180      	movs	r1, #128	; 0x80
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f9b1 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e046      	b.n	800403e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc2:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3302      	adds	r3, #2
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	e017      	b.n	8004004 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
 8003fda:	e013      	b.n	8004004 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f98e 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e023      	b.n	800403e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	60ba      	str	r2, [r7, #8]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1b7      	bne.n	8003f7e <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2200      	movs	r2, #0
 8004016:	2140      	movs	r1, #64	; 0x40
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f975 	bl	8004308 <UART_WaitOnFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e00a      	b.n	800403e <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004046:	b480      	push	{r7}
 8004048:	b085      	sub	sp, #20
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	4613      	mov	r3, r2
 8004052:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	d140      	bne.n	80040e2 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_UART_Receive_IT+0x26>
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e039      	b.n	80040e4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_UART_Receive_IT+0x38>
 800407a:	2302      	movs	r3, #2
 800407c:	e032      	b.n	80040e4 <HAL_UART_Receive_IT+0x9e>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	88fa      	ldrh	r2, [r7, #6]
 8004096:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2222      	movs	r2, #34	; 0x22
 80040a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040bc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0220 	orr.w	r2, r2, #32
 80040dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10d      	bne.n	8004142 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_UART_IRQHandler+0x52>
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9cc 	bl	80044d8 <UART_Receive_IT>
      return;
 8004140:	e0cb      	b.n	80042da <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80ab 	beq.w	80042a0 <HAL_UART_IRQHandler+0x1b0>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <HAL_UART_IRQHandler+0x70>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80a0 	beq.w	80042a0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_UART_IRQHandler+0x90>
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	f043 0201 	orr.w	r2, r3, #1
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_UART_IRQHandler+0xb0>
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	f043 0202 	orr.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_UART_IRQHandler+0xd0>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	f043 0204 	orr.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_UART_IRQHandler+0xf0>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	f043 0208 	orr.w	r2, r3, #8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d077      	beq.n	80042d8 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <HAL_UART_IRQHandler+0x112>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f96b 	bl	80044d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <HAL_UART_IRQHandler+0x13a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d031      	beq.n	800428e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8b6 	bl	800439c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d023      	beq.n	8004286 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800424c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <HAL_UART_IRQHandler+0x1f0>)
 800425c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc ff3e 	bl	80010e4 <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004278:	4610      	mov	r0, r2
 800427a:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	e00e      	b.n	800429c <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f839 	bl	80042f6 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00a      	b.n	800429c <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f835 	bl	80042f6 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e006      	b.n	800429c <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f831 	bl	80042f6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800429a:	e01d      	b.n	80042d8 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	bf00      	nop
    return;
 800429e:	e01b      	b.n	80042d8 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_UART_IRQHandler+0x1cc>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f8a2 	bl	80043fe <UART_Transmit_IT>
    return;
 80042ba:	e00e      	b.n	80042da <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_UART_IRQHandler+0x1ea>
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d004      	beq.n	80042da <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8e9 	bl	80044a8 <UART_EndTransmit_IT>
    return;
 80042d6:	e000      	b.n	80042da <HAL_UART_IRQHandler+0x1ea>
    return;
 80042d8:	bf00      	nop
  }
}
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	080043d7 	.word	0x080043d7

080042e4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004318:	e02c      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004320:	d028      	beq.n	8004374 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x30>
 8004328:	f7fb ff68 	bl	80001fc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	429a      	cmp	r2, r3
 8004336:	d21d      	bcs.n	8004374 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004346:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e00f      	b.n	8004394 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	d0c3      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr

080043d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff ff80 	bl	80042f6 <HAL_UART_ErrorCallback>
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043fe:	b480      	push	{r7}
 8004400:	b085      	sub	sp, #20
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b21      	cmp	r3, #33	; 0x21
 8004410:	d144      	bne.n	800449c <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441a:	d11a      	bne.n	8004452 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004430:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	1c9a      	adds	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	621a      	str	r2, [r3, #32]
 8004444:	e00e      	b.n	8004464 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	621a      	str	r2, [r3, #32]
 8004450:	e008      	b.n	8004464 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6211      	str	r1, [r2, #32]
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29b      	uxth	r3, r3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4619      	mov	r1, r3
 8004472:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10f      	bne.n	8004498 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004486:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004496:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044be:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ff0b 	bl	80042e4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b22      	cmp	r3, #34	; 0x22
 80044ea:	d171      	bne.n	80045d0 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f4:	d123      	bne.n	800453e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10e      	bne.n	8004522 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
 8004520:	e029      	b.n	8004576 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	b29b      	uxth	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
 800453c:	e01b      	b.n	8004576 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10a      	bne.n	800455c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6858      	ldr	r0, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	1c59      	adds	r1, r3, #1
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6291      	str	r1, [r2, #40]	; 0x28
 8004556:	b2c2      	uxtb	r2, r0
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	e00c      	b.n	8004576 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	1c58      	adds	r0, r3, #1
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	6288      	str	r0, [r1, #40]	; 0x28
 800456e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29b      	uxth	r3, r3
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4619      	mov	r1, r3
 8004584:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004586:	2b00      	cmp	r3, #0
 8004588:	d120      	bne.n	80045cc <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0220 	bic.w	r2, r2, #32
 8004598:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a8:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695a      	ldr	r2, [r3, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fc14 	bl	8004df0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e002      	b.n	80045d2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e000      	b.n	80045d2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80045d0:	2302      	movs	r3, #2
  }
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b5b0      	push	{r4, r5, r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800461e:	f023 030c 	bic.w	r3, r3, #12
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	430b      	orrs	r3, r1
 800462a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a6f      	ldr	r2, [pc, #444]	; (8004804 <UART_SetConfig+0x228>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d16b      	bne.n	8004724 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800464c:	f7fe feb6 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004650:	4602      	mov	r2, r0
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009a      	lsls	r2, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	4a68      	ldr	r2, [pc, #416]	; (8004808 <UART_SetConfig+0x22c>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	011c      	lsls	r4, r3, #4
 8004670:	f7fe fea4 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004674:	4602      	mov	r2, r0
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	441a      	add	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	fbb2 f5f3 	udiv	r5, r2, r3
 800468a:	f7fe fe97 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 800468e:	4602      	mov	r2, r0
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009a      	lsls	r2, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <UART_SetConfig+0x22c>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2264      	movs	r2, #100	; 0x64
 80046ae:	fb02 f303 	mul.w	r3, r2, r3
 80046b2:	1aeb      	subs	r3, r5, r3
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	3332      	adds	r3, #50	; 0x32
 80046b8:	4a53      	ldr	r2, [pc, #332]	; (8004808 <UART_SetConfig+0x22c>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046c4:	441c      	add	r4, r3
 80046c6:	f7fe fe79 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009a      	lsls	r2, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80046e0:	f7fe fe6c 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	009a      	lsls	r2, r3, #2
 80046ee:	441a      	add	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	4a43      	ldr	r2, [pc, #268]	; (8004808 <UART_SetConfig+0x22c>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	2264      	movs	r2, #100	; 0x64
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	1aeb      	subs	r3, r5, r3
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	3332      	adds	r3, #50	; 0x32
 800470e:	4a3e      	ldr	r2, [pc, #248]	; (8004808 <UART_SetConfig+0x22c>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	f003 020f 	and.w	r2, r3, #15
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4422      	add	r2, r4
 8004720:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004722:	e06a      	b.n	80047fa <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004724:	f7fe fe36 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8004728:	4602      	mov	r2, r0
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009a      	lsls	r2, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	fbb2 f3f3 	udiv	r3, r2, r3
 800473e:	4a32      	ldr	r2, [pc, #200]	; (8004808 <UART_SetConfig+0x22c>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	011c      	lsls	r4, r3, #4
 8004748:	f7fe fe24 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 800474c:	4602      	mov	r2, r0
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009a      	lsls	r2, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004762:	f7fe fe17 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8004766:	4602      	mov	r2, r0
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	009a      	lsls	r2, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	4a22      	ldr	r2, [pc, #136]	; (8004808 <UART_SetConfig+0x22c>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	2264      	movs	r2, #100	; 0x64
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	1aeb      	subs	r3, r5, r3
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	3332      	adds	r3, #50	; 0x32
 8004790:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <UART_SetConfig+0x22c>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800479c:	441c      	add	r4, r3
 800479e:	f7fe fdf9 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 80047a2:	4602      	mov	r2, r0
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009a      	lsls	r2, r3, #2
 80047ac:	441a      	add	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	fbb2 f5f3 	udiv	r5, r2, r3
 80047b8:	f7fe fdec 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009a      	lsls	r2, r3, #2
 80047c6:	441a      	add	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d2:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <UART_SetConfig+0x22c>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	2264      	movs	r2, #100	; 0x64
 80047dc:	fb02 f303 	mul.w	r3, r2, r3
 80047e0:	1aeb      	subs	r3, r5, r3
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	3332      	adds	r3, #50	; 0x32
 80047e6:	4a08      	ldr	r2, [pc, #32]	; (8004808 <UART_SetConfig+0x22c>)
 80047e8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4422      	add	r2, r4
 80047f8:	609a      	str	r2, [r3, #8]
}
 80047fa:	bf00      	nop
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bdb0      	pop	{r4, r5, r7, pc}
 8004802:	bf00      	nop
 8004804:	40013800 	.word	0x40013800
 8004808:	51eb851f 	.word	0x51eb851f

0800480c <anemo_Timer1Init>:
TIM_HandleTypeDef htim1;

//================================================================

void anemo_Timer1Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_IC_InitTypeDef     sICConfig;

  htim1.Instance = TIM1;
 8004812:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <anemo_Timer1Init+0x7c>)
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <anemo_Timer1Init+0x80>)
 8004816:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <anemo_Timer1Init+0x7c>)
 800481a:	2200      	movs	r2, #0
 800481c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <anemo_Timer1Init+0x7c>)
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <anemo_Timer1Init+0x7c>)
 8004826:	22c8      	movs	r2, #200	; 0xc8
 8004828:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800482a:	4b17      	ldr	r3, [pc, #92]	; (8004888 <anemo_Timer1Init+0x7c>)
 800482c:	2200      	movs	r2, #0
 800482e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Init(&htim1);
 8004830:	4815      	ldr	r0, [pc, #84]	; (8004888 <anemo_Timer1Init+0x7c>)
 8004832:	f7fe fdf7 	bl	8003424 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_TI1;//TIM_CLOCKSOURCE_ETRMODE1;// TIM_CLOCKSOURCE_ETRMODE2; //TIM_CLOCKSOURCE_TI1
 8004836:	2350      	movs	r3, #80	; 0x50
 8004838:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0xE;
 8004842:	230e      	movs	r3, #14
 8004844:	61fb      	str	r3, [r7, #28]
  HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8004846:	f107 0310 	add.w	r3, r7, #16
 800484a:	4619      	mov	r1, r3
 800484c:	480e      	ldr	r0, [pc, #56]	; (8004888 <anemo_Timer1Init+0x7c>)
 800484e:	f7fe ffc1 	bl	80037d4 <HAL_TIM_ConfigClockSource>

  sICConfig.ICPolarity  = TIM_ICPOLARITY_RISING;
 8004852:	2300      	movs	r3, #0
 8004854:	603b      	str	r3, [r7, #0]
  sICConfig.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004856:	2301      	movs	r3, #1
 8004858:	607b      	str	r3, [r7, #4]
  sICConfig.ICPrescaler = TIM_ICPSC_DIV1;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
  sICConfig.ICFilter    = 0xE;
 800485e:	230e      	movs	r3, #14
 8004860:	60fb      	str	r3, [r7, #12]
  HAL_TIM_IC_ConfigChannel(&htim1, &sICConfig, TIM_CHANNEL_1);
 8004862:	463b      	mov	r3, r7
 8004864:	2200      	movs	r2, #0
 8004866:	4619      	mov	r1, r3
 8004868:	4807      	ldr	r0, [pc, #28]	; (8004888 <anemo_Timer1Init+0x7c>)
 800486a:	f7fe ff17 	bl	800369c <HAL_TIM_IC_ConfigChannel>

  TIM1->CNT=0; 			//valeur initiale
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <anemo_Timer1Init+0x80>)
 8004870:	2200      	movs	r2, #0
 8004872:	625a      	str	r2, [r3, #36]	; 0x24
  TIM1->CR1|=0x0001; 	//timer 1 en ON.
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <anemo_Timer1Init+0x80>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <anemo_Timer1Init+0x80>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000120 	.word	0x20000120
 800488c:	40012c00 	.word	0x40012c00

08004890 <anemo_GetCount>:

//================================================================
int anemo_GetCount(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
	return TIM1->CNT;
 8004894:	4b02      	ldr	r3, [pc, #8]	; (80048a0 <anemo_GetCount+0x10>)
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004898:	4618      	mov	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40012c00 	.word	0x40012c00

080048a4 <anemo_ResetCount>:
//================================================================
int anemo_ResetCount(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
	  TIM1->CNT=0;
 80048a8:	4b03      	ldr	r3, [pc, #12]	; (80048b8 <anemo_ResetCount+0x14>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24

	  return 0;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00

080048bc <can_Init>:

//===========================================================================
// INIT CAN
//===========================================================================
void can_Init()
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
	CanHandle.Instance = CAN1;
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <can_Init+0x6c>)
 80048c2:	4a1a      	ldr	r2, [pc, #104]	; (800492c <can_Init+0x70>)
 80048c4:	601a      	str	r2, [r3, #0]
	CanHandle.pTxMsg = &canTxMsg;
 80048c6:	4b18      	ldr	r3, [pc, #96]	; (8004928 <can_Init+0x6c>)
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <can_Init+0x74>)
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
	CanHandle.pRxMsg = &canRxMsg;
 80048cc:	4b16      	ldr	r3, [pc, #88]	; (8004928 <can_Init+0x6c>)
 80048ce:	4a19      	ldr	r2, [pc, #100]	; (8004934 <can_Init+0x78>)
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34

	CanHandle.Init.TTCM = DISABLE;
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <can_Init+0x6c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]
	CanHandle.Init.ABOM = DISABLE;
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <can_Init+0x6c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
	CanHandle.Init.AWUM = DISABLE;
 80048de:	4b12      	ldr	r3, [pc, #72]	; (8004928 <can_Init+0x6c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	621a      	str	r2, [r3, #32]
	CanHandle.Init.NART = DISABLE;
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <can_Init+0x6c>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
	CanHandle.Init.RFLM = DISABLE;
 80048ea:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <can_Init+0x6c>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
	CanHandle.Init.TXFP = DISABLE;
 80048f0:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <can_Init+0x6c>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c
	CanHandle.Init.Mode = CAN_MODE_NORMAL;
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <can_Init+0x6c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	609a      	str	r2, [r3, #8]

	// 125kbps bit rate (default)
	// APB1 peripheral clock = 36000000Hz
	CanHandle.Init.Prescaler = 18;      // number of time quanta = 36000000/18/125000 = 16
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <can_Init+0x6c>)
 80048fe:	2212      	movs	r2, #18
 8004900:	605a      	str	r2, [r3, #4]
	CanHandle.Init.SJW = CAN_SJW_1TQ;
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <can_Init+0x6c>)
 8004904:	2200      	movs	r2, #0
 8004906:	60da      	str	r2, [r3, #12]
	CanHandle.Init.BS1 = CAN_BS1_11TQ;  // sample point at (1 + 11) / 16 * 100 = 75%
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <can_Init+0x6c>)
 800490a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800490e:	611a      	str	r2, [r3, #16]
	CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <can_Init+0x6c>)
 8004912:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004916:	615a      	str	r2, [r3, #20]

	HAL_CAN_Init(&CanHandle);
 8004918:	4803      	ldr	r0, [pc, #12]	; (8004928 <can_Init+0x6c>)
 800491a:	f7fb fc9d 	bl	8000258 <HAL_CAN_Init>
	can_IrqSet(can_callback);
 800491e:	4806      	ldr	r0, [pc, #24]	; (8004938 <can_Init+0x7c>)
 8004920:	f000 f896 	bl	8004a50 <can_IrqSet>
	
//	can_Filter(0, 0, CANAny, 0);
}
 8004924:	bf00      	nop
 8004926:	bd80      	pop	{r7, pc}
 8004928:	2000018c 	.word	0x2000018c
 800492c:	40006400 	.word	0x40006400
 8004930:	200001cc 	.word	0x200001cc
 8004934:	20000200 	.word	0x20000200
 8004938:	08005351 	.word	0x08005351

0800493c <can_SetFreq>:

//===========================================================================
int can_SetFreq(int hz) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]

    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004944:	2014      	movs	r0, #20
 8004946:	f7fc fb90 	bl	800106a <HAL_NVIC_DisableIRQ>
    // APB1 peripheral clock = 36000000Hz
    switch(hz) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a36      	ldr	r2, [pc, #216]	; (8004a28 <can_SetFreq+0xec>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d014      	beq.n	800497c <can_SetFreq+0x40>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a34      	ldr	r2, [pc, #208]	; (8004a28 <can_SetFreq+0xec>)
 8004956:	4293      	cmp	r3, r2
 8004958:	dc4c      	bgt.n	80049f4 <can_SetFreq+0xb8>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a33      	ldr	r2, [pc, #204]	; (8004a2c <can_SetFreq+0xf0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01b      	beq.n	800499a <can_SetFreq+0x5e>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a31      	ldr	r2, [pc, #196]	; (8004a2c <can_SetFreq+0xf0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	dc44      	bgt.n	80049f4 <can_SetFreq+0xb8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <can_SetFreq+0xf4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <can_SetFreq+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2f      	ldr	r2, [pc, #188]	; (8004a34 <can_SetFreq+0xf8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01e      	beq.n	80049b8 <can_SetFreq+0x7c>
 800497a:	e03b      	b.n	80049f4 <can_SetFreq+0xb8>
    case 1000000:
        // 1000kbps bit rate
        CanHandle.Init.Prescaler = 3;//3;      // number of time quanta = 36000000/3/1000000 = 12
 800497c:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <can_SetFreq+0xfc>)
 800497e:	2203      	movs	r2, #3
 8004980:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 8004982:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <can_SetFreq+0xfc>)
 8004984:	2200      	movs	r2, #0
 8004986:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_8TQ;  // sample point at: (1 + 8) / 12 * 100 = 75%
 8004988:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <can_SetFreq+0xfc>)
 800498a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800498e:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_3TQ;
 8004990:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <can_SetFreq+0xfc>)
 8004992:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004996:	615a      	str	r2, [r3, #20]
        break;
 8004998:	e03a      	b.n	8004a10 <can_SetFreq+0xd4>
    case 500000:
        // 500kbps bit rate
        CanHandle.Init.Prescaler = 6;      // number of time quanta = 36000000/6/500000 = 12
 800499a:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <can_SetFreq+0xfc>)
 800499c:	2206      	movs	r2, #6
 800499e:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 80049a0:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <can_SetFreq+0xfc>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_8TQ;  // sample point at: (1 + 8) / 12 * 100 = 75%
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <can_SetFreq+0xfc>)
 80049a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80049ac:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_3TQ;
 80049ae:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <can_SetFreq+0xfc>)
 80049b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80049b4:	615a      	str	r2, [r3, #20]
        break;
 80049b6:	e02b      	b.n	8004a10 <can_SetFreq+0xd4>
    case 250000:
        // 250kbps
        CanHandle.Init.Prescaler = 9;      // number of time quanta = 36000000/9/250000 = 16
 80049b8:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <can_SetFreq+0xfc>)
 80049ba:	2209      	movs	r2, #9
 80049bc:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 80049be:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <can_SetFreq+0xfc>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 80049c4:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <can_SetFreq+0xfc>)
 80049c6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80049ca:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 80049cc:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <can_SetFreq+0xfc>)
 80049ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80049d2:	615a      	str	r2, [r3, #20]
        break;
 80049d4:	e01c      	b.n	8004a10 <can_SetFreq+0xd4>
    case 125000:
        // 125kbps
        CanHandle.Init.Prescaler = 18;     // number of time quanta = 36000000/18/125000 = 16
 80049d6:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <can_SetFreq+0xfc>)
 80049d8:	2212      	movs	r2, #18
 80049da:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 80049dc:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <can_SetFreq+0xfc>)
 80049de:	2200      	movs	r2, #0
 80049e0:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <can_SetFreq+0xfc>)
 80049e4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80049e8:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 80049ea:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <can_SetFreq+0xfc>)
 80049ec:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80049f0:	615a      	str	r2, [r3, #20]
        break;
 80049f2:	e00d      	b.n	8004a10 <can_SetFreq+0xd4>
    default:
        // 125kbps (default)
        CanHandle.Init.Prescaler = 18;     // number of time quanta = 36000000/18/125000 = 16
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <can_SetFreq+0xfc>)
 80049f6:	2212      	movs	r2, #18
 80049f8:	605a      	str	r2, [r3, #4]
        CanHandle.Init.SJW = CAN_SJW_1TQ;
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <can_SetFreq+0xfc>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	60da      	str	r2, [r3, #12]
        CanHandle.Init.BS1 = CAN_BS1_11TQ; // sample point at: (1 + 11) / 16 * 100 = 75%
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <can_SetFreq+0xfc>)
 8004a02:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8004a06:	611a      	str	r2, [r3, #16]
        CanHandle.Init.BS2 = CAN_BS2_4TQ;
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <can_SetFreq+0xfc>)
 8004a0a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004a0e:	615a      	str	r2, [r3, #20]
    }

    HAL_CAN_Init(&CanHandle);
 8004a10:	4809      	ldr	r0, [pc, #36]	; (8004a38 <can_SetFreq+0xfc>)
 8004a12:	f7fb fc21 	bl	8000258 <HAL_CAN_Init>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004a16:	2014      	movs	r0, #20
 8004a18:	f7fc fb19 	bl	800104e <HAL_NVIC_EnableIRQ>

    return 1;
 8004a1c:	2301      	movs	r3, #1
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	000f4240 	.word	0x000f4240
 8004a2c:	0007a120 	.word	0x0007a120
 8004a30:	0001e848 	.word	0x0001e848
 8004a34:	0003d090 	.word	0x0003d090
 8004a38:	2000018c 	.word	0x2000018c

08004a3c <can_IrqInit>:
//===========================================================================

void can_IrqInit(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
	HAL_CAN_Receive_IT(&CanHandle, CAN_FIFO0);
 8004a40:	2100      	movs	r1, #0
 8004a42:	4802      	ldr	r0, [pc, #8]	; (8004a4c <can_IrqInit+0x10>)
 8004a44:	f7fb ff3a 	bl	80008bc <HAL_CAN_Receive_IT>
}
 8004a48:	bf00      	nop
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000018c 	.word	0x2000018c

08004a50 <can_IrqSet>:
{
    rxCompleteCallback = NULL;
}
//===========================================================================
void can_IrqSet(void (*fptr) (void))
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
    rxCompleteCallback = fptr;
 8004a58:	4a03      	ldr	r2, [pc, #12]	; (8004a68 <can_IrqSet+0x18>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr
 8004a68:	200004b0 	.word	0x200004b0

08004a6c <can_Write>:
//===========================================================================
int can_Write(CAN_Message msg)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	463c      	mov	r4, r7
 8004a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int i = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

    if(msg.format == CANStandard) {
 8004a7c:	7b7b      	ldrb	r3, [r7, #13]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d108      	bne.n	8004a94 <can_Write+0x28>
        CanHandle.pTxMsg->StdId = msg.id;
 8004a82:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <can_Write+0xac>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	601a      	str	r2, [r3, #0]
        CanHandle.pTxMsg->ExtId = 0x00;
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <can_Write+0xac>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	e007      	b.n	8004aa4 <can_Write+0x38>
    }
    else {
        CanHandle.pTxMsg->StdId = 0x00;
 8004a94:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <can_Write+0xac>)
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
        CanHandle.pTxMsg->ExtId = msg.id;
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <can_Write+0xac>)
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
    }

    CanHandle.pTxMsg->RTR = msg.type == CANData ? CAN_RTR_DATA : CAN_RTR_REMOTE;
 8004aa4:	7bbb      	ldrb	r3, [r7, #14]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <can_Write+0x42>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	e000      	b.n	8004ab0 <can_Write+0x44>
 8004aae:	2202      	movs	r2, #2
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <can_Write+0xac>)
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	60da      	str	r2, [r3, #12]
    CanHandle.pTxMsg->IDE = msg.format == CANStandard ? CAN_ID_STD : CAN_ID_EXT;
 8004ab6:	7b7b      	ldrb	r3, [r7, #13]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <can_Write+0x54>
 8004abc:	2200      	movs	r2, #0
 8004abe:	e000      	b.n	8004ac2 <can_Write+0x56>
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <can_Write+0xac>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	609a      	str	r2, [r3, #8]
    CanHandle.pTxMsg->DLC = msg.len;
 8004ac8:	7b3a      	ldrb	r2, [r7, #12]
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <can_Write+0xac>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	611a      	str	r2, [r3, #16]

    for(i = 0; i < msg.len; i++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e00d      	b.n	8004af2 <can_Write+0x86>
        CanHandle.pTxMsg->Data[i] = msg.data[i];
 8004ad6:	1d3a      	adds	r2, r7, #4
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	7819      	ldrb	r1, [r3, #0]
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <can_Write+0xac>)
 8004ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	6059      	str	r1, [r3, #4]
    for(i = 0; i < msg.len; i++)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	3301      	adds	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	7b3b      	ldrb	r3, [r7, #12]
 8004af4:	461a      	mov	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	4293      	cmp	r3, r2
 8004afa:	dbec      	blt.n	8004ad6 <can_Write+0x6a>

    if(HAL_CAN_Transmit(&CanHandle, 0) != HAL_OK)
 8004afc:	2100      	movs	r1, #0
 8004afe:	4806      	ldr	r0, [pc, #24]	; (8004b18 <can_Write+0xac>)
 8004b00:	f7fb fd66 	bl	80005d0 <HAL_CAN_Transmit>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <can_Write+0xa2>
							{
								 return 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <can_Write+0xa4>
							 }

    else
        return 1;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}
 8004b18:	2000018c 	.word	0x2000018c

08004b1c <can_Read>:
//===========================================================================
int can_Read(CAN_Message* msg)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	int i=0;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

    msg->id = CanHandle.pRxMsg->IDE == CAN_ID_STD ? CanHandle.pRxMsg->StdId : CanHandle.pRxMsg->ExtId;
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <can_Read+0xa4>)
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d103      	bne.n	8004b3a <can_Read+0x1e>
 8004b32:	4b23      	ldr	r3, [pc, #140]	; (8004bc0 <can_Read+0xa4>)
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	e002      	b.n	8004b40 <can_Read+0x24>
 8004b3a:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <can_Read+0xa4>)
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6013      	str	r3, [r2, #0]
    msg->type = CanHandle.pRxMsg->RTR == CAN_RTR_DATA ? CANData : CANRemote;
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <can_Read+0xa4>)
 8004b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	739a      	strb	r2, [r3, #14]
    msg->format = CanHandle.pRxMsg->IDE == CAN_ID_STD ? CANStandard : CANExtended;
 8004b5a:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <can_Read+0xa4>)
 8004b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	735a      	strb	r2, [r3, #13]
    msg->len = CanHandle.pRxMsg->DLC;
 8004b70:	4b13      	ldr	r3, [pc, #76]	; (8004bc0 <can_Read+0xa4>)
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	731a      	strb	r2, [r3, #12]
    for(i = 0; i < msg->len; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e010      	b.n	8004ba4 <can_Read+0x88>
        msg->data[i] = CanHandle.pRxMsg->Data[i];
 8004b82:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <can_Read+0xa4>)
 8004b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b2d9      	uxtb	r1, r3
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	3304      	adds	r3, #4
 8004b9a:	460a      	mov	r2, r1
 8004b9c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < msg->len; i++)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	7b1b      	ldrb	r3, [r3, #12]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4293      	cmp	r3, r2
 8004bae:	dbe8      	blt.n	8004b82 <can_Read+0x66>

    return msg->len;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	7b1b      	ldrb	r3, [r3, #12]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	2000018c 	.word	0x2000018c

08004bc4 <can_Filter_list>:

    return HAL_CAN_Init(&CanHandle);
}
//===========================================================================
int can_Filter_list(uint32_t id1_id2, uint32_t id3_id4, CANFormat format /*=CANAny*/, int32_t handle /*=0*/ )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	; 0x38
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	71fb      	strb	r3, [r7, #7]
    CAN_FilterConfTypeDef   sFilterConfig;

    sFilterConfig.FilterNumber = handle;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;  // CAN_FILTERMODE_IDMASK
 8004bd8:	2301      	movs	r3, #1
 8004bda:	62bb      	str	r3, [r7, #40]	; 0x28
    
    sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT; // CAN_FILTERSCALE_32BIT
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.FilterIdHigh = (((id1_id2) >> 16) & 0xFFFF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	0c1b      	lsrs	r3, r3, #16
 8004be4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterIdLow = ((id1_id2) & 0xFFFF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMaskIdHigh = (((id3_id4) >> 16) & 0xFFFF);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterMaskIdLow = ((id3_id4) & 0xFFFF);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterFIFOAssignment = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterActivation = ENABLE;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
    sFilterConfig.BankNumber = 14;
 8004c00:	230e      	movs	r3, #14
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig);
 8004c04:	f107 0310 	add.w	r3, r7, #16
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4804      	ldr	r0, [pc, #16]	; (8004c1c <can_Filter_list+0x58>)
 8004c0c:	f7fb fc06 	bl	800041c <HAL_CAN_ConfigFilter>

    return 1;
 8004c10:	2301      	movs	r3, #1
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3738      	adds	r7, #56	; 0x38
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	2000018c 	.word	0x2000018c

08004c20 <HAL_CAN_RxCpltCallback>:
    return HAL_CAN_GetError(&CanHandle);
}
//===========================================================================

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* CanHandle)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    if (rxCompleteCallback != NULL)
 8004c28:	4b26      	ldr	r3, [pc, #152]	; (8004cc4 <HAL_CAN_RxCpltCallback+0xa4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_CAN_RxCpltCallback+0x16>
        rxCompleteCallback();
 8004c30:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_CAN_RxCpltCallback+0xa4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4798      	blx	r3

    if (CanHandle->State == HAL_CAN_STATE_BUSY_TX)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b12      	cmp	r3, #18
 8004c40:	d104      	bne.n	8004c4c <HAL_CAN_RxCpltCallback+0x2c>
        CanHandle->State = HAL_CAN_STATE_BUSY_TX_RX;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2232      	movs	r2, #50	; 0x32
 8004c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004c4a:	e02e      	b.n	8004caa <HAL_CAN_RxCpltCallback+0x8a>
    else {
        CanHandle->State = HAL_CAN_STATE_BUSY_RX;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2222      	movs	r2, #34	; 0x22
 8004c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Set CAN error code to none */
        CanHandle->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Enable Error warning Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_EWG);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c68:	615a      	str	r2, [r3, #20]

        /* Enable Error passive Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_EPV);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695a      	ldr	r2, [r3, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c78:	615a      	str	r2, [r3, #20]

        /* Enable Bus-off Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_BOF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c88:	615a      	str	r2, [r3, #20]

        /* Enable Last error code Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_LEC);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c98:	615a      	str	r2, [r3, #20]

        /* Enable Error Interrupt */
        __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_ERR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ca8:	615a      	str	r2, [r3, #20]
    }

    // Enable FIFO 0 message pending Interrupt
    __HAL_CAN_ENABLE_IT(CanHandle, CAN_IT_FMP0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0202 	orr.w	r2, r2, #2
 8004cb8:	615a      	str	r2, [r3, #20]
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200004b0 	.word	0x200004b0

08004cc8 <i2c1_Init>:

//======================================================================
// Init I2C1 Peripheral
//======================================================================
void i2c1_Init()
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
    hi2c1.Instance             = I2C1;
 8004ccc:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <i2c1_Init+0x48>)
 8004cce:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <i2c1_Init+0x4c>)
 8004cd0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed      = I2C1_SPEED;		// cf config.h
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <i2c1_Init+0x48>)
 8004cd4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004cd8:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <i2c1_Init+0x48>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1     = 0x2;
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <i2c1_Init+0x48>)
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <i2c1_Init+0x48>)
 8004ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cec:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cee:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <i2c1_Init+0x48>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2     = 0xFF;
 8004cf4:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <i2c1_Init+0x48>)
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <i2c1_Init+0x48>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <i2c1_Init+0x48>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	621a      	str	r2, [r3, #32]

    HAL_I2C_Init(&hi2c1);
 8004d06:	4802      	ldr	r0, [pc, #8]	; (8004d10 <i2c1_Init+0x48>)
 8004d08:	f7fc fc1a 	bl	8001540 <HAL_I2C_Init>
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	2000023c 	.word	0x2000023c
 8004d14:	40005400 	.word	0x40005400

08004d18 <uart2_Init>:
//=================================================================
//	UART 2 INIT (STLINK UART)
//=================================================================

void uart2_Init()
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
	  Uart2Handle.Instance        = USART2;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <uart2_Init+0x4c>)
 8004d1e:	4a12      	ldr	r2, [pc, #72]	; (8004d68 <uart2_Init+0x50>)
 8004d20:	601a      	str	r2, [r3, #0]
	  Uart2Handle.Init.BaudRate   = UART_BAUDRATE;
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <uart2_Init+0x4c>)
 8004d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d28:	605a      	str	r2, [r3, #4]
	  Uart2Handle.Init.WordLength = UART_WORDLENGTH_8B;
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <uart2_Init+0x4c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
	  Uart2Handle.Init.StopBits   = UART_STOPBITS_1;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <uart2_Init+0x4c>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]
	  Uart2Handle.Init.Parity     = UART_PARITY_NONE;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <uart2_Init+0x4c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	611a      	str	r2, [r3, #16]
	  Uart2Handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <uart2_Init+0x4c>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	619a      	str	r2, [r3, #24]
	  Uart2Handle.Init.Mode       = UART_MODE_TX_RX;
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <uart2_Init+0x4c>)
 8004d44:	220c      	movs	r2, #12
 8004d46:	615a      	str	r2, [r3, #20]
	  Uart2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <uart2_Init+0x4c>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart2Handle);
 8004d4e:	4805      	ldr	r0, [pc, #20]	; (8004d64 <uart2_Init+0x4c>)
 8004d50:	f7ff f88a 	bl	8003e68 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
 8004d54:	2201      	movs	r2, #1
 8004d56:	4905      	ldr	r1, [pc, #20]	; (8004d6c <uart2_Init+0x54>)
 8004d58:	4802      	ldr	r0, [pc, #8]	; (8004d64 <uart2_Init+0x4c>)
 8004d5a:	f7ff f974 	bl	8004046 <HAL_UART_Receive_IT>
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	200000e0 	.word	0x200000e0
 8004d68:	40004400 	.word	0x40004400
 8004d6c:	20000290 	.word	0x20000290

08004d70 <uart1_Init>:
	  HAL_UART_Receive_IT(&UartDxlHandle, (uint8_t *)rec_buf6, 1);
}


void uart1_Init()
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
	  UartDxlHandle.Instance          = USART1;
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <uart1_Init+0x4c>)
 8004d76:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <uart1_Init+0x50>)
 8004d78:	601a      	str	r2, [r3, #0]

	  UartDxlHandle.Init.BaudRate     =57600;//1000000;//57600;
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <uart1_Init+0x4c>)
 8004d7c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004d80:	605a      	str	r2, [r3, #4]
	  UartDxlHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <uart1_Init+0x4c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	609a      	str	r2, [r3, #8]
	  UartDxlHandle.Init.StopBits     = UART_STOPBITS_1;
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <uart1_Init+0x4c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	60da      	str	r2, [r3, #12]
	  UartDxlHandle.Init.Parity       = UART_PARITY_NONE;
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <uart1_Init+0x4c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	611a      	str	r2, [r3, #16]
	  UartDxlHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8004d94:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <uart1_Init+0x4c>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	619a      	str	r2, [r3, #24]
	  UartDxlHandle.Init.Mode         = UART_MODE_TX_RX;
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <uart1_Init+0x4c>)
 8004d9c:	220c      	movs	r2, #12
 8004d9e:	615a      	str	r2, [r3, #20]
	  UartDxlHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8004da0:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <uart1_Init+0x4c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&UartDxlHandle);
 8004da6:	4805      	ldr	r0, [pc, #20]	; (8004dbc <uart1_Init+0x4c>)
 8004da8:	f7ff f85e 	bl	8003e68 <HAL_UART_Init>

	  HAL_UART_Receive_IT(&UartDxlHandle, (uint8_t *)rec_buf6, 1);
 8004dac:	2201      	movs	r2, #1
 8004dae:	4905      	ldr	r1, [pc, #20]	; (8004dc4 <uart1_Init+0x54>)
 8004db0:	4802      	ldr	r0, [pc, #8]	; (8004dbc <uart1_Init+0x4c>)
 8004db2:	f7ff f948 	bl	8004046 <HAL_UART_Receive_IT>
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000088 	.word	0x20000088
 8004dc0:	40013800 	.word	0x40013800
 8004dc4:	20000028 	.word	0x20000028

08004dc8 <sendFrame>:


void sendFrame(unsigned char* s, int size)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&UartDxlHandle, s, size, 0xFFFF);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4803      	ldr	r0, [pc, #12]	; (8004dec <sendFrame+0x24>)
 8004dde:	f7ff f899 	bl	8003f14 <HAL_UART_Transmit>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000088 	.word	0x20000088

08004df0 <HAL_UART_RxCpltCallback>:

//=================================================================
//	UART RECEIVE CALLBACK5
//=================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]


		if (UartHandle -> Instance == USART3)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <HAL_UART_RxCpltCallback+0x3c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d10a      	bne.n	8004e18 <HAL_UART_RxCpltCallback+0x28>
		{
			HAL_UART_Receive_IT(&UartDxlHandle, (uint8_t *)rec_buf6, 1);
 8004e02:	2201      	movs	r2, #1
 8004e04:	490a      	ldr	r1, [pc, #40]	; (8004e30 <HAL_UART_RxCpltCallback+0x40>)
 8004e06:	480b      	ldr	r0, [pc, #44]	; (8004e34 <HAL_UART_RxCpltCallback+0x44>)
 8004e08:	f7ff f91d 	bl	8004046 <HAL_UART_Receive_IT>
			dxl_rcv_cb(rec_buf6[0]);
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_UART_RxCpltCallback+0x40>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f96b 	bl	80050ec <dxl_rcv_cb>
		else
		{

			 HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
		}
}
 8004e16:	e004      	b.n	8004e22 <HAL_UART_RxCpltCallback+0x32>
			 HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, 1);
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4907      	ldr	r1, [pc, #28]	; (8004e38 <HAL_UART_RxCpltCallback+0x48>)
 8004e1c:	4807      	ldr	r0, [pc, #28]	; (8004e3c <HAL_UART_RxCpltCallback+0x4c>)
 8004e1e:	f7ff f912 	bl	8004046 <HAL_UART_Receive_IT>
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40004800 	.word	0x40004800
 8004e30:	20000028 	.word	0x20000028
 8004e34:	20000088 	.word	0x20000088
 8004e38:	20000290 	.word	0x20000290
 8004e3c:	200000e0 	.word	0x200000e0

08004e40 <dxl_LED>:
//==============================================================
//				WRITE INSTRUCTIONS
//==============================================================

void dxl_LED(int id, char val )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_LED), DXL_BYTE_2(XL_LED), val );
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	2341      	movs	r3, #65	; 0x41
 8004e56:	2203      	movs	r2, #3
 8004e58:	2103      	movs	r1, #3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f85c 	bl	8004f18 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004e60:	200a      	movs	r0, #10
 8004e62:	f7fb f9d5 	bl	8000210 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <dxl_torque>:
//==============================================================
void dxl_torque(int id, char val)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af02      	add	r7, sp, #8
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_TORQUE), DXL_BYTE_2(XL_TORQUE), val );
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	2340      	movs	r3, #64	; 0x40
 8004e84:	2203      	movs	r2, #3
 8004e86:	2103      	movs	r1, #3
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f845 	bl	8004f18 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004e8e:	200a      	movs	r0, #10
 8004e90:	f7fb f9be 	bl	8000210 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004e94:	bf00      	nop
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <dxl_setOperatingMode>:
//==============================================================
void dxl_setOperatingMode(int id, char val)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_OPERATING_MODE), DXL_BYTE_2(XL_OPERATING_MODE), val );
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	2300      	movs	r3, #0
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	230b      	movs	r3, #11
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	2103      	movs	r1, #3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f82e 	bl	8004f18 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004ebc:	200a      	movs	r0, #10
 8004ebe:	f7fb f9a7 	bl	8000210 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <dxl_setGoalVelocity>:
#endif
}

//==============================================================
void dxl_setGoalVelocity(int id, int val)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b088      	sub	sp, #32
 8004ece:	af06      	add	r7, sp, #24
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004ed8:	461a      	mov	r2, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	0a1b      	lsrs	r3, r3, #8
 8004ede:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004ee0:	4619      	mov	r1, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004ee8:	4618      	mov	r0, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	0e1b      	lsrs	r3, r3, #24
 8004eee:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 8004ef0:	9304      	str	r3, [sp, #16]
 8004ef2:	9003      	str	r0, [sp, #12]
 8004ef4:	9102      	str	r1, [sp, #8]
 8004ef6:	9201      	str	r2, [sp, #4]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	2368      	movs	r3, #104	; 0x68
 8004efe:	2206      	movs	r2, #6
 8004f00:	2103      	movs	r1, #3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f808 	bl	8004f18 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fb f981 	bl	8000210 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <dxl_sendPacket>:
	HAL_Delay(DXL_DELAY);
#endif
}
//==============================================================
int dxl_sendPacket(int id, int instruction, int parameter_data_size, ...)
{
 8004f18:	b40c      	push	{r2, r3}
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b094      	sub	sp, #80	; 0x50
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
	uint8_t frame_to_write[50];
	uint16_t crc;
	uint32_t length=3+parameter_data_size;
 8004f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f26:	3303      	adds	r3, #3
 8004f28:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t arg;

	frame_to_write[0] = 0xFF;
 8004f2a:	23ff      	movs	r3, #255	; 0xff
 8004f2c:	743b      	strb	r3, [r7, #16]
	frame_to_write[1] = 0xFF;
 8004f2e:	23ff      	movs	r3, #255	; 0xff
 8004f30:	747b      	strb	r3, [r7, #17]
	frame_to_write[2] = 0xFD;
 8004f32:	23fd      	movs	r3, #253	; 0xfd
 8004f34:	74bb      	strb	r3, [r7, #18]
	frame_to_write[3] = 0x00;	// RESERVED
 8004f36:	2300      	movs	r3, #0
 8004f38:	74fb      	strb	r3, [r7, #19]
	frame_to_write[4] = id;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	753b      	strb	r3, [r7, #20]
	frame_to_write[5] = length&0xFF;		// length_LB
 8004f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	757b      	strb	r3, [r7, #21]
	frame_to_write[6] = (length>>8)&0xFF;		// length_HB
 8004f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	75bb      	strb	r3, [r7, #22]
	frame_to_write[7] = instruction;		// Instruction : Write
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	75fb      	strb	r3, [r7, #23]

    va_list args;
    va_start(args, parameter_data_size);
 8004f54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004f58:	60fb      	str	r3, [r7, #12]
	for(int i=0 ; i < parameter_data_size ; i++ )
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f5e:	e010      	b.n	8004f82 <dxl_sendPacket+0x6a>
	{
	arg = va_arg(args, int);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1d1a      	adds	r2, r3, #4
 8004f64:	60fa      	str	r2, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	frame_to_write[8+i]= arg;
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	3308      	adds	r3, #8
 8004f70:	3350      	adds	r3, #80	; 0x50
 8004f72:	443b      	add	r3, r7
 8004f74:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004f78:	f803 2c40 	strb.w	r2, [r3, #-64]
	for(int i=0 ; i < parameter_data_size ; i++ )
 8004f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7e:	3301      	adds	r3, #1
 8004f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f86:	429a      	cmp	r2, r3
 8004f88:	dbea      	blt.n	8004f60 <dxl_sendPacket+0x48>
	}
	crc = dxl_updateCRC(0,frame_to_write,8+parameter_data_size);
 8004f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3308      	adds	r3, #8
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	f107 0310 	add.w	r3, r7, #16
 8004f96:	4619      	mov	r1, r3
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f000 f837 	bl	800500c <dxl_updateCRC>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	frame_to_write[8+parameter_data_size]= (uint8_t) ( crc & 0xFF );
 8004fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	3350      	adds	r3, #80	; 0x50
 8004fb0:	443b      	add	r3, r7
 8004fb2:	f803 2c40 	strb.w	r2, [r3, #-64]
	frame_to_write[9+parameter_data_size]= (uint8_t) ( (crc>>8) & 0xFF );
 8004fb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc0:	3309      	adds	r3, #9
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	3350      	adds	r3, #80	; 0x50
 8004fc6:	443b      	add	r3, r7
 8004fc8:	f803 2c40 	strb.w	r2, [r3, #-64]
	va_end(args);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fd2:	480d      	ldr	r0, [pc, #52]	; (8005008 <dxl_sendPacket+0xf0>)
 8004fd4:	f7fc fa84 	bl	80014e0 <HAL_GPIO_WritePin>
	sendFrame(frame_to_write,parameter_data_size+2+8);
 8004fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fda:	f103 020a 	add.w	r2, r3, #10
 8004fde:	f107 0310 	add.w	r3, r7, #16
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff feef 	bl	8004dc8 <sendFrame>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ff0:	4805      	ldr	r0, [pc, #20]	; (8005008 <dxl_sendPacket+0xf0>)
 8004ff2:	f7fc fa75 	bl	80014e0 <HAL_GPIO_WritePin>

	return 0;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3750      	adds	r7, #80	; 0x50
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005002:	b002      	add	sp, #8
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010800 	.word	0x40010800

0800500c <dxl_updateCRC>:
//==============================================================
uint16_t dxl_updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8005012:	af00      	add	r7, sp, #0
 8005014:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005018:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800501c:	6019      	str	r1, [r3, #0]
 800501e:	4611      	mov	r1, r2
 8005020:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005024:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8005028:	4602      	mov	r2, r0
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005030:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8005034:	460a      	mov	r2, r1
 8005036:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
 8005038:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800503c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005040:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <dxl_updateCRC+0xdc>)
 8005042:	4618      	mov	r0, r3
 8005044:	4611      	mov	r1, r2
 8005046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800504a:	461a      	mov	r2, r3
 800504c:	f000 fd7a 	bl	8005b44 <memcpy>
	                                0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5,
	                                0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
	                                0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
	                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for(j = 0; j < data_blk_size; j++)
 8005050:	2300      	movs	r3, #0
 8005052:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8005056:	e034      	b.n	80050c2 <dxl_updateCRC+0xb6>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 8005058:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800505c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	b29a      	uxth	r2, r3
 8005066:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800506a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8005074:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8005078:	1c58      	adds	r0, r3, #1
 800507a:	6008      	str	r0, [r1, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	4053      	eors	r3, r2
 8005082:	b29b      	uxth	r3, r3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800508a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800508e:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	021b      	lsls	r3, r3, #8
 8005096:	b21a      	sxth	r2, r3
 8005098:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 800509c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80050a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050a4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80050a8:	b21b      	sxth	r3, r3
 80050aa:	4053      	eors	r3, r2
 80050ac:	b21a      	sxth	r2, r3
 80050ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80050b2:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80050b6:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 80050b8:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80050bc:	3301      	adds	r3, #1
 80050be:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80050c2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80050c6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80050ca:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d3c1      	bcc.n	8005058 <dxl_updateCRC+0x4c>
	}

	return crc_accum;
 80050d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80050d8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80050dc:	881b      	ldrh	r3, [r3, #0]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	08005c88 	.word	0x08005c88

080050ec <dxl_rcv_cb>:
uint8_t 	size = 0;

uint8_t 	dxl_rcvBuf[BUF_SIZE];
//==================================================================
void dxl_rcv_cb(uint8_t car)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
		dxl_rcvBuf[(p_wr++)%BUF_SIZE] = car;
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <dxl_rcv_cb+0x4c>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	b2d1      	uxtb	r1, r2
 80050fe:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <dxl_rcv_cb+0x4c>)
 8005100:	7011      	strb	r1, [r2, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <dxl_rcv_cb+0x50>)
 8005106:	fb83 1302 	smull	r1, r3, r3, r2
 800510a:	1159      	asrs	r1, r3, #5
 800510c:	17d3      	asrs	r3, r2, #31
 800510e:	1acb      	subs	r3, r1, r3
 8005110:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	4909      	ldr	r1, [pc, #36]	; (8005140 <dxl_rcv_cb+0x54>)
 800511c:	79fa      	ldrb	r2, [r7, #7]
 800511e:	54ca      	strb	r2, [r1, r3]
		size++;
 8005120:	4b08      	ldr	r3, [pc, #32]	; (8005144 <dxl_rcv_cb+0x58>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	b2da      	uxtb	r2, r3
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <dxl_rcv_cb+0x58>)
 800512a:	701a      	strb	r2, [r3, #0]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000040 	.word	0x20000040
 800513c:	10624dd3 	.word	0x10624dd3
 8005140:	20000294 	.word	0x20000294
 8005144:	20000042 	.word	0x20000042

08005148 <NVIC_SetPriority>:
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	6039      	str	r1, [r7, #0]
 8005152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8005154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005158:	2b00      	cmp	r3, #0
 800515a:	da0b      	bge.n	8005174 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	490c      	ldr	r1, [pc, #48]	; (8005194 <NVIC_SetPriority+0x4c>)
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	3b04      	subs	r3, #4
 800516a:	0112      	lsls	r2, r2, #4
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	440b      	add	r3, r1
 8005170:	761a      	strb	r2, [r3, #24]
}
 8005172:	e009      	b.n	8005188 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	b2da      	uxtb	r2, r3
 8005178:	4907      	ldr	r1, [pc, #28]	; (8005198 <NVIC_SetPriority+0x50>)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	0112      	lsls	r2, r2, #4
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	440b      	add	r3, r1
 8005184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000ed00 	.word	0xe000ed00
 8005198:	e000e100 	.word	0xe000e100

0800519c <SysTick_Config>:
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ac:	d301      	bcc.n	80051b2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80051ae:	2301      	movs	r3, #1
 80051b0:	e00f      	b.n	80051d2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051b2:	4a0a      	ldr	r2, [pc, #40]	; (80051dc <SysTick_Config+0x40>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051ba:	210f      	movs	r1, #15
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c0:	f7ff ffc2 	bl	8005148 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <SysTick_Config+0x40>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ca:	4b04      	ldr	r3, [pc, #16]	; (80051dc <SysTick_Config+0x40>)
 80051cc:	2207      	movs	r2, #7
 80051ce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	e000e010 	.word	0xe000e010

080051e0 <main>:

//====================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>>> MAIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//====================================================================
int main(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
	HAL_Init();
 80051e6:	f7fa ffb1 	bl	800014c <HAL_Init>
	systemClock_Config();
 80051ea:	f000 fbc5 	bl	8005978 <systemClock_Config>
    SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000); //SysTick end of count event each 1ms
 80051ee:	f7fe f8c7 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4a4e      	ldr	r2, [pc, #312]	; (8005330 <main+0x150>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	099b      	lsrs	r3, r3, #6
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff ffcd 	bl	800519c <SysTick_Config>
	uart2_Init();
 8005202:	f7ff fd89 	bl	8004d18 <uart2_Init>
	uart1_Init();
 8005206:	f7ff fdb3 	bl	8004d70 <uart1_Init>
	i2c1_Init();
 800520a:	f7ff fd5d 	bl	8004cc8 <i2c1_Init>

#if DYN_ANEMO
    anemo_Timer1Init();
 800520e:	f7ff fafd 	bl	800480c <anemo_Timer1Init>
#endif

	HAL_Delay(1000); // Waitf
 8005212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005216:	f7fa fffb 	bl	8000210 <HAL_Delay>
//USER CODE ENDf

#endif


    can_Init();
 800521a:	f7ff fb4f 	bl	80048bc <can_Init>
    can_SetFreq(CAN_BAUDRATE); // CAN BAUDRATE : 500 MHz -- cf Inc/config.h
 800521e:	4845      	ldr	r0, [pc, #276]	; (8005334 <main+0x154>)
 8005220:	f7ff fb8c 	bl	800493c <can_SetFreq>
#if USE_FILTER
    //can_Filter_list((ID_1<<21)|(ID_1<<5) , (ID_1<<21)|(ID_1<<5) , CANStandard, 0); // Accept until 4 Standard IDs

    uint32_t id1_id2 = (ID_1 << 5);  // ID 1 dans le champ 16 bits
 8005224:	2320      	movs	r3, #32
 8005226:	607b      	str	r3, [r7, #4]
    uint32_t id3_id4 = 0x00000000;   // Pas d'autres ID
 8005228:	2300      	movs	r3, #0
 800522a:	603b      	str	r3, [r7, #0]

    can_Filter_list(id1_id2, id3_id4, CANStandard, 0);
 800522c:	2300      	movs	r3, #0
 800522e:	2200      	movs	r2, #0
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fcc6 	bl	8004bc4 <can_Filter_list>


#else
    can_Filter_disable(); // Accept everybody
#endif
    can_IrqInit();
 8005238:	f7ff fc00 	bl	8004a3c <can_IrqInit>
    can_IrqSet(&can_callback);
 800523c:	483e      	ldr	r0, [pc, #248]	; (8005338 <main+0x158>)
 800523e:	f7ff fc07 	bl	8004a50 <can_IrqSet>

    txMsg.id=0x55;
 8005242:	4b3e      	ldr	r3, [pc, #248]	; (800533c <main+0x15c>)
 8005244:	2255      	movs	r2, #85	; 0x55
 8005246:	601a      	str	r2, [r3, #0]
    txMsg.data[0]=1;
 8005248:	4b3c      	ldr	r3, [pc, #240]	; (800533c <main+0x15c>)
 800524a:	2201      	movs	r2, #1
 800524c:	711a      	strb	r2, [r3, #4]
    txMsg.data[1]=2;
 800524e:	4b3b      	ldr	r3, [pc, #236]	; (800533c <main+0x15c>)
 8005250:	2202      	movs	r2, #2
 8005252:	715a      	strb	r2, [r3, #5]
    txMsg.data[2]=0;
 8005254:	4b39      	ldr	r3, [pc, #228]	; (800533c <main+0x15c>)
 8005256:	2200      	movs	r2, #0
 8005258:	719a      	strb	r2, [r3, #6]
    txMsg.data[3]=0;
 800525a:	4b38      	ldr	r3, [pc, #224]	; (800533c <main+0x15c>)
 800525c:	2200      	movs	r2, #0
 800525e:	71da      	strb	r2, [r3, #7]
    txMsg.data[4]=0;
 8005260:	4b36      	ldr	r3, [pc, #216]	; (800533c <main+0x15c>)
 8005262:	2200      	movs	r2, #0
 8005264:	721a      	strb	r2, [r3, #8]
    txMsg.data[5]=0;
 8005266:	4b35      	ldr	r3, [pc, #212]	; (800533c <main+0x15c>)
 8005268:	2200      	movs	r2, #0
 800526a:	725a      	strb	r2, [r3, #9]
    txMsg.data[6]=0;
 800526c:	4b33      	ldr	r3, [pc, #204]	; (800533c <main+0x15c>)
 800526e:	2200      	movs	r2, #0
 8005270:	729a      	strb	r2, [r3, #10]
    txMsg.data[7]=0;
 8005272:	4b32      	ldr	r3, [pc, #200]	; (800533c <main+0x15c>)
 8005274:	2200      	movs	r2, #0
 8005276:	72da      	strb	r2, [r3, #11]


    txMsg.len=2;
 8005278:	4b30      	ldr	r3, [pc, #192]	; (800533c <main+0x15c>)
 800527a:	2202      	movs	r2, #2
 800527c:	731a      	strb	r2, [r3, #12]
    txMsg.format=CANStandard;
 800527e:	4b2f      	ldr	r3, [pc, #188]	; (800533c <main+0x15c>)
 8005280:	2200      	movs	r2, #0
 8005282:	735a      	strb	r2, [r3, #13]
    txMsg.type=CANData;
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <main+0x15c>)
 8005286:	2200      	movs	r2, #0
 8005288:	739a      	strb	r2, [r3, #14]

    can_Write(txMsg);
 800528a:	4b2c      	ldr	r3, [pc, #176]	; (800533c <main+0x15c>)
 800528c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800528e:	f7ff fbed 	bl	8004a6c <can_Write>
    // Décommenter pour utiliser ce Timer ; permet de déclencher une interruption toutes les N ms
    //tickTimer_Init(1000); // period in ms

#if DYN_ANEMO
   // TEST MOTEUR
    dxl_LED(1, LED_ON);
 8005292:	2101      	movs	r1, #1
 8005294:	2001      	movs	r0, #1
 8005296:	f7ff fdd3 	bl	8004e40 <dxl_LED>
    HAL_Delay(500);
 800529a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800529e:	f7fa ffb7 	bl	8000210 <HAL_Delay>
    dxl_LED(1, LED_OFF);
 80052a2:	2100      	movs	r1, #0
 80052a4:	2001      	movs	r0, #1
 80052a6:	f7ff fdcb 	bl	8004e40 <dxl_LED>
    HAL_Delay(500);
 80052aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052ae:	f7fa ffaf 	bl	8000210 <HAL_Delay>

    dxl_torque(1, TORQUE_OFF);
 80052b2:	2100      	movs	r1, #0
 80052b4:	2001      	movs	r0, #1
 80052b6:	f7ff fdda 	bl	8004e6e <dxl_torque>
    dxl_setOperatingMode(1, VELOCITY_MODE);
 80052ba:	2101      	movs	r1, #1
 80052bc:	2001      	movs	r0, #1
 80052be:	f7ff fded 	bl	8004e9c <dxl_setOperatingMode>
    dxl_torque(1, TORQUE_ON);
 80052c2:	2101      	movs	r1, #1
 80052c4:	2001      	movs	r0, #1
 80052c6:	f7ff fdd2 	bl	8004e6e <dxl_torque>
    dxl_setGoalVelocity(1, 140);
 80052ca:	218c      	movs	r1, #140	; 0x8c
 80052cc:	2001      	movs	r0, #1
 80052ce:	f7ff fdfc 	bl	8004eca <dxl_setGoalVelocity>
    HAL_Delay(2000);
 80052d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80052d6:	f7fa ff9b 	bl	8000210 <HAL_Delay>
    dxl_setGoalVelocity(1, 0);
 80052da:	2100      	movs	r1, #0
 80052dc:	2001      	movs	r0, #1
 80052de:	f7ff fdf4 	bl	8004eca <dxl_setGoalVelocity>

    while (1) {

#if DYN_ANEMO

    	pos = anemo_GetCount();
 80052e2:	f7ff fad5 	bl	8004890 <anemo_GetCount>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4a15      	ldr	r2, [pc, #84]	; (8005340 <main+0x160>)
 80052ea:	6013      	str	r3, [r2, #0]
    	anemo_ResetCount();
 80052ec:	f7ff fada 	bl	80048a4 <anemo_ResetCount>

    	//term_printf("hello %d\n\r",pos);

    	HAL_Delay(200);
 80052f0:	20c8      	movs	r0, #200	; 0xc8
 80052f2:	f7fa ff8d 	bl	8000210 <HAL_Delay>

    	vit = pos;
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <main+0x160>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a12      	ldr	r2, [pc, #72]	; (8005344 <main+0x164>)
 80052fc:	6013      	str	r3, [r2, #0]


    	if (manuel==0)
 80052fe:	4b12      	ldr	r3, [pc, #72]	; (8005348 <main+0x168>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10d      	bne.n	8005322 <main+0x142>
    	{
    		if (vit>10)
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <main+0x164>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b0a      	cmp	r3, #10
 800530c:	dd04      	ble.n	8005318 <main+0x138>
    		{
        		dxl_setGoalVelocity(1, 140);
 800530e:	218c      	movs	r1, #140	; 0x8c
 8005310:	2001      	movs	r0, #1
 8005312:	f7ff fdda 	bl	8004eca <dxl_setGoalVelocity>
 8005316:	e7e4      	b.n	80052e2 <main+0x102>
	    	}else{
		    	dxl_setGoalVelocity(1, 0);
 8005318:	2100      	movs	r1, #0
 800531a:	2001      	movs	r0, #1
 800531c:	f7ff fdd5 	bl	8004eca <dxl_setGoalVelocity>
 8005320:	e7df      	b.n	80052e2 <main+0x102>
	    	}
    	}else
    	{
    		dxl_setGoalVelocity(1, vel_cons);
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <main+0x16c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4619      	mov	r1, r3
 8005328:	2001      	movs	r0, #1
 800532a:	f7ff fdce 	bl	8004eca <dxl_setGoalVelocity>
    	pos = anemo_GetCount();
 800532e:	e7d8      	b.n	80052e2 <main+0x102>
 8005330:	10624dd3 	.word	0x10624dd3
 8005334:	0007a120 	.word	0x0007a120
 8005338:	08005351 	.word	0x08005351
 800533c:	200004a0 	.word	0x200004a0
 8005340:	20000054 	.word	0x20000054
 8005344:	20000058 	.word	0x20000058
 8005348:	2000005c 	.word	0x2000005c
 800534c:	20000060 	.word	0x20000060

08005350 <can_callback>:
//====================================================================
//			CAN CALLBACK RECEPT
//====================================================================

void can_callback(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
	CAN_Message msg_rcv;

	can_Read(&msg_rcv);
 8005356:	463b      	mov	r3, r7
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fbdf 	bl	8004b1c <can_Read>
	if (msg_rcv.data[0] == 1)
 800535e:	793b      	ldrb	r3, [r7, #4]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d102      	bne.n	800536a <can_callback+0x1a>
	{
		send_vel();
 8005364:	f000 f818 	bl	8005398 <send_vel>
	{
		vel_cons = msg_rcv.data[1];

	}

}
 8005368:	e00e      	b.n	8005388 <can_callback+0x38>
	}else if (msg_rcv.data[0] == 2)//mode
 800536a:	793b      	ldrb	r3, [r7, #4]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d104      	bne.n	800537a <can_callback+0x2a>
		manuel = msg_rcv.data[1];
 8005370:	797b      	ldrb	r3, [r7, #5]
 8005372:	461a      	mov	r2, r3
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <can_callback+0x40>)
 8005376:	601a      	str	r2, [r3, #0]
}
 8005378:	e006      	b.n	8005388 <can_callback+0x38>
	}else if (msg_rcv.data[0] == 3)//vitesse moteur
 800537a:	793b      	ldrb	r3, [r7, #4]
 800537c:	2b03      	cmp	r3, #3
 800537e:	d103      	bne.n	8005388 <can_callback+0x38>
		vel_cons = msg_rcv.data[1];
 8005380:	797b      	ldrb	r3, [r7, #5]
 8005382:	461a      	mov	r2, r3
 8005384:	4b03      	ldr	r3, [pc, #12]	; (8005394 <can_callback+0x44>)
 8005386:	601a      	str	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000005c 	.word	0x2000005c
 8005394:	20000060 	.word	0x20000060

08005398 <send_vel>:

//====================================================================
//			SEND VEL
//====================================================================
void send_vel()
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
	txMsg.id=0x55;	// Identifiant du message à envoyer
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <send_vel+0x34>)
 800539e:	2255      	movs	r2, #85	; 0x55
 80053a0:	601a      	str	r2, [r3, #0]
	txMsg.len=1;
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <send_vel+0x34>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	731a      	strb	r2, [r3, #12]
	txMsg.format=CANStandard;
 80053a8:	4b08      	ldr	r3, [pc, #32]	; (80053cc <send_vel+0x34>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	735a      	strb	r2, [r3, #13]
	txMsg.type=CANData;
 80053ae:	4b07      	ldr	r3, [pc, #28]	; (80053cc <send_vel+0x34>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	739a      	strb	r2, [r3, #14]
	txMsg.data[0]=pos;
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <send_vel+0x38>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4b04      	ldr	r3, [pc, #16]	; (80053cc <send_vel+0x34>)
 80053bc:	711a      	strb	r2, [r3, #4]
	can_Write(txMsg);
 80053be:	4b03      	ldr	r3, [pc, #12]	; (80053cc <send_vel+0x34>)
 80053c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053c2:	f7ff fb53 	bl	8004a6c <can_Write>
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200004a0 	.word	0x200004a0
 80053d0:	20000054 	.word	0x20000054

080053d4 <HAL_TIM_PeriodElapsedCallback>:
//====================================================================
//			TIMER CALLBACK PERIOD
//====================================================================

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	//term_printf("from timer interrupt\n\r");

}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <HAL_MspInit>:
void HAL_UARTDXLMspInit(void);
void HAL_GPIO_PA10_MspInit(void);

//===================================================================
void HAL_MspInit(void)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	af00      	add	r7, sp, #0
	HAL_UARTCOM_MspInit();
 80053ea:	f000 f813 	bl	8005414 <HAL_UARTCOM_MspInit>

	HAL_CANBUS_MspInit();
 80053ee:	f000 f897 	bl	8005520 <HAL_CANBUS_MspInit>
	//HAL_spi_MspInit();
	HAL_timer1_MspInit();
 80053f2:	f000 f8fb 	bl	80055ec <HAL_timer1_MspInit>
	HAL_tickTimer_MspInit();
 80053f6:	f000 f93b 	bl	8005670 <HAL_tickTimer_MspInit>
	HAL_pushButton_MspInit();
 80053fa:	f000 f9d7 	bl	80057ac <HAL_pushButton_MspInit>
	HAL_vl6180x_GPIO1_MspInit();
 80053fe:	f000 f9f9 	bl	80057f4 <HAL_vl6180x_GPIO1_MspInit>
	HAL_i2c1_MspInit();
 8005402:	f000 f953 	bl	80056ac <HAL_i2c1_MspInit>
	HAL_UARTDXLMspInit();
 8005406:	f000 f841 	bl	800548c <HAL_UARTDXLMspInit>
	HAL_GPIO_PA10_MspInit();
 800540a:	f000 fa21 	bl	8005850 <HAL_GPIO_PA10_MspInit>
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <HAL_UARTCOM_MspInit>:
// TX --> PA2
// RX --> PA3
//===================================================================

void HAL_UARTCOM_MspInit(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800541a:	4b1a      	ldr	r3, [pc, #104]	; (8005484 <HAL_UARTCOM_MspInit+0x70>)
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	4a19      	ldr	r2, [pc, #100]	; (8005484 <HAL_UARTCOM_MspInit+0x70>)
 8005420:	f043 0304 	orr.w	r3, r3, #4
 8005424:	6193      	str	r3, [r2, #24]
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <HAL_UARTCOM_MspInit+0x70>)
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_USART2_CLK_ENABLE();
 8005432:	4b14      	ldr	r3, [pc, #80]	; (8005484 <HAL_UARTCOM_MspInit+0x70>)
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <HAL_UARTCOM_MspInit+0x70>)
 8005438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543c:	61d3      	str	r3, [r2, #28]
 800543e:	4b11      	ldr	r3, [pc, #68]	; (8005484 <HAL_UARTCOM_MspInit+0x70>)
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin       = GPIO_PIN_2;		// USART 2 TX PIN
 800544a:	2304      	movs	r3, #4
 800544c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800544e:	2302      	movs	r3, #2
 8005450:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8005452:	2301      	movs	r3, #1
 8005454:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005456:	2303      	movs	r3, #3
 8005458:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4619      	mov	r1, r3
 8005460:	4809      	ldr	r0, [pc, #36]	; (8005488 <HAL_UARTCOM_MspInit+0x74>)
 8005462:	f7fb feb5 	bl	80011d0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin =  GPIO_PIN_3;			// USART 2 RX PIN
 8005466:	2308      	movs	r3, #8
 8005468:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	4619      	mov	r1, r3
 8005474:	4804      	ldr	r0, [pc, #16]	; (8005488 <HAL_UARTCOM_MspInit+0x74>)
 8005476:	f7fb feab 	bl	80011d0 <HAL_GPIO_Init>
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40021000 	.word	0x40021000
 8005488:	40010800 	.word	0x40010800

0800548c <HAL_UARTDXLMspInit>:

void HAL_UARTDXLMspInit(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005492:	4b21      	ldr	r3, [pc, #132]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	4a20      	ldr	r2, [pc, #128]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 8005498:	f043 0304 	orr.w	r3, r3, #4
 800549c:	6193      	str	r3, [r2, #24]
 800549e:	4b1e      	ldr	r3, [pc, #120]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 80054b0:	f043 0308 	orr.w	r3, r3, #8
 80054b4:	6193      	str	r3, [r2, #24]
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]
	         GPIO_InitStruct.Pull = GPIO_NOPULL;
	         HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
*/


	  __HAL_RCC_USART1_CLK_ENABLE();
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	4a14      	ldr	r2, [pc, #80]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 80054c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054cc:	6193      	str	r3, [r2, #24]
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <HAL_UARTDXLMspInit+0x8c>)
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]

	  	         GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054de:	613b      	str	r3, [r7, #16]
	  	         GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	2302      	movs	r3, #2
 80054e2:	617b      	str	r3, [r7, #20]
	  	         GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054e4:	2303      	movs	r3, #3
 80054e6:	61fb      	str	r3, [r7, #28]
	  	         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e8:	f107 0310 	add.w	r3, r7, #16
 80054ec:	4619      	mov	r1, r3
 80054ee:	480b      	ldr	r0, [pc, #44]	; (800551c <HAL_UARTDXLMspInit+0x90>)
 80054f0:	f7fb fe6e 	bl	80011d0 <HAL_GPIO_Init>

	  	         GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f8:	613b      	str	r3, [r7, #16]
	  	         GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
	  	         GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054fe:	2301      	movs	r3, #1
 8005500:	61bb      	str	r3, [r7, #24]
	  	         HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005502:	f107 0310 	add.w	r3, r7, #16
 8005506:	4619      	mov	r1, r3
 8005508:	4804      	ldr	r0, [pc, #16]	; (800551c <HAL_UARTDXLMspInit+0x90>)
 800550a:	f7fb fe61 	bl	80011d0 <HAL_GPIO_Init>

	   	//  HAL_NVIC_SetPriority(USART3_IRQn, 6, 0);
	   	//  HAL_NVIC_EnableIRQ(USART3_IRQn);

}
 800550e:	bf00      	nop
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
 800551c:	40010800 	.word	0x40010800

08005520 <HAL_CANBUS_MspInit>:
// CAN1 alternate function remapping
// RX PA11	PB8	(PD0)
// TX PA12	PB9	(PD1)
//===================================================================
void HAL_CANBUS_MspInit(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef   GPIO_InitStruct;

	  __HAL_RCC_CAN1_CLK_ENABLE();
 8005526:	4b2e      	ldr	r3, [pc, #184]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	4a2d      	ldr	r2, [pc, #180]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 800552c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005530:	61d3      	str	r3, [r2, #28]
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553a:	60bb      	str	r3, [r7, #8]
 800553c:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 800553e:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	4a27      	ldr	r2, [pc, #156]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 8005544:	f043 0304 	orr.w	r3, r3, #4
 8005548:	6193      	str	r3, [r2, #24]
 800554a:	4b25      	ldr	r3, [pc, #148]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
	  __HAL_AFIO_REMAP_CAN1_1();
 8005556:	4b23      	ldr	r3, [pc, #140]	; (80055e4 <HAL_CANBUS_MspInit+0xc4>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <HAL_CANBUS_MspInit+0xc4>)
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	6053      	str	r3, [r2, #4]
	  __HAL_RCC_AFIO_CLK_ENABLE();
 8005572:	4b1b      	ldr	r3, [pc, #108]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	4a1a      	ldr	r2, [pc, #104]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6193      	str	r3, [r2, #24]
 800557e:	4b18      	ldr	r3, [pc, #96]	; (80055e0 <HAL_CANBUS_MspInit+0xc0>)
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	683b      	ldr	r3, [r7, #0]

	  /* CAN1 TX GPIO pin configuration --> PA_12 */
	  GPIO_InitStruct.Pin =  GPIO_PIN_12;		//CANx_TX_PIN;
 800558a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800558e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005590:	2302      	movs	r3, #2
 8005592:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005594:	2303      	movs	r3, #3
 8005596:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005598:	2301      	movs	r3, #1
 800559a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	4619      	mov	r1, r3
 80055a2:	4811      	ldr	r0, [pc, #68]	; (80055e8 <HAL_CANBUS_MspInit+0xc8>)
 80055a4:	f7fb fe14 	bl	80011d0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_11;		//CANx_RX_PIN;
 80055a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055ac:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;	//GPIO_MODE_AF_PP;
 80055ae:	2300      	movs	r3, #0
 80055b0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055b2:	2303      	movs	r3, #3
 80055b4:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;		//GPIO_PULLUP;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	4619      	mov	r1, r3
 80055c0:	4809      	ldr	r0, [pc, #36]	; (80055e8 <HAL_CANBUS_MspInit+0xc8>)
 80055c2:	f7fb fe05 	bl	80011d0 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80055c6:	2200      	movs	r2, #0
 80055c8:	2105      	movs	r1, #5
 80055ca:	2014      	movs	r0, #20
 80055cc:	f7fb fd23 	bl	8001016 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80055d0:	2014      	movs	r0, #20
 80055d2:	f7fb fd3c 	bl	800104e <HAL_NVIC_EnableIRQ>

}
 80055d6:	bf00      	nop
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40010800 	.word	0x40010800

080055ec <HAL_timer1_MspInit>:
//===================================================================
//			TIMER 1 Anemometer
// TIM_CLK		--> 	PA8 (PWM1_1)
//===================================================================
void HAL_timer1_MspInit(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	   __HAL_RCC_TIM1_CLK_ENABLE();
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <HAL_timer1_MspInit+0x78>)
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <HAL_timer1_MspInit+0x78>)
 80055f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055fc:	6193      	str	r3, [r2, #24]
 80055fe:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_timer1_MspInit+0x78>)
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
	   __HAL_RCC_GPIOA_CLK_ENABLE();
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <HAL_timer1_MspInit+0x78>)
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	4a15      	ldr	r2, [pc, #84]	; (8005664 <HAL_timer1_MspInit+0x78>)
 8005610:	f043 0304 	orr.w	r3, r3, #4
 8005614:	6193      	str	r3, [r2, #24]
 8005616:	4b13      	ldr	r3, [pc, #76]	; (8005664 <HAL_timer1_MspInit+0x78>)
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	687b      	ldr	r3, [r7, #4]

	   __HAL_AFIO_REMAP_TIM1_DISABLE();
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <HAL_timer1_MspInit+0x7c>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	61fb      	str	r3, [r7, #28]
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <HAL_timer1_MspInit+0x7c>)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	6053      	str	r3, [r2, #4]

	  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800563e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005642:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005648:	2301      	movs	r3, #1
 800564a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800564c:	2302      	movs	r3, #2
 800564e:	61bb      	str	r3, [r7, #24]

 	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	4619      	mov	r1, r3
 8005656:	4805      	ldr	r0, [pc, #20]	; (800566c <HAL_timer1_MspInit+0x80>)
 8005658:	f7fb fdba 	bl	80011d0 <HAL_GPIO_Init>
}
 800565c:	bf00      	nop
 800565e:	3720      	adds	r7, #32
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	40010000 	.word	0x40010000
 800566c:	40010800 	.word	0x40010800

08005670 <HAL_tickTimer_MspInit>:

//===================================================================
//			TIMER 3 TickTimer
//===================================================================
void HAL_tickTimer_MspInit(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
	  __HAL_RCC_TIM3_CLK_ENABLE();
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <HAL_tickTimer_MspInit+0x38>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4a0b      	ldr	r2, [pc, #44]	; (80056a8 <HAL_tickTimer_MspInit+0x38>)
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	61d3      	str	r3, [r2, #28]
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <HAL_tickTimer_MspInit+0x38>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
	  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800568e:	2200      	movs	r2, #0
 8005690:	2103      	movs	r1, #3
 8005692:	201d      	movs	r0, #29
 8005694:	f7fb fcbf 	bl	8001016 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005698:	201d      	movs	r0, #29
 800569a:	f7fb fcd8 	bl	800104e <HAL_NVIC_EnableIRQ>
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000

080056ac <HAL_i2c1_MspInit>:
//			I2C1
// PB8 : I2C1 SCL
// PB9 : I2C1 SDA
//===================================================================
void HAL_i2c1_MspInit(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056b2:	4b3b      	ldr	r3, [pc, #236]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	4a3a      	ldr	r2, [pc, #232]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056b8:	f043 0304 	orr.w	r3, r3, #4
 80056bc:	6193      	str	r3, [r2, #24]
 80056be:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ca:	4b35      	ldr	r3, [pc, #212]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	4a34      	ldr	r2, [pc, #208]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056d0:	f043 0308 	orr.w	r3, r3, #8
 80056d4:	6193      	str	r3, [r2, #24]
 80056d6:	4b32      	ldr	r3, [pc, #200]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056e2:	4b2f      	ldr	r3, [pc, #188]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	4a2e      	ldr	r2, [pc, #184]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056e8:	f043 0310 	orr.w	r3, r3, #16
 80056ec:	6193      	str	r3, [r2, #24]
 80056ee:	4b2c      	ldr	r3, [pc, #176]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]

	  __HAL_RCC_AFIO_CLK_ENABLE();
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	4a28      	ldr	r2, [pc, #160]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	6193      	str	r3, [r2, #24]
 8005706:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
	  __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <HAL_i2c1_MspInit+0xf8>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
 8005728:	4a1e      	ldr	r2, [pc, #120]	; (80057a4 <HAL_i2c1_MspInit+0xf8>)
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	6053      	str	r3, [r2, #4]

	  __HAL_RCC_I2C1_CLK_ENABLE();
 800572e:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 8005734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005738:	61d3      	str	r3, [r2, #28]
 800573a:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <HAL_i2c1_MspInit+0xf4>)
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin       = GPIO_PIN_8;
 8005746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800574a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 800574c:	2312      	movs	r3, #18
 800574e:	61bb      	str	r3, [r7, #24]
	  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005754:	2303      	movs	r3, #3
 8005756:	623b      	str	r3, [r7, #32]

	  HAL_GPIO_Init( GPIOB, &GPIO_InitStruct);
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	4619      	mov	r1, r3
 800575e:	4812      	ldr	r0, [pc, #72]	; (80057a8 <HAL_i2c1_MspInit+0xfc>)
 8005760:	f7fb fd36 	bl	80011d0 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8005764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005768:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init( GPIOB, &GPIO_InitStruct);
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	4619      	mov	r1, r3
 8005770:	480d      	ldr	r0, [pc, #52]	; (80057a8 <HAL_i2c1_MspInit+0xfc>)
 8005772:	f7fb fd2d 	bl	80011d0 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 4, 1);
 8005776:	2201      	movs	r2, #1
 8005778:	2104      	movs	r1, #4
 800577a:	2020      	movs	r0, #32
 800577c:	f7fb fc4b 	bl	8001016 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005780:	2020      	movs	r0, #32
 8005782:	f7fb fc64 	bl	800104e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 2);
 8005786:	2202      	movs	r2, #2
 8005788:	2104      	movs	r1, #4
 800578a:	201f      	movs	r0, #31
 800578c:	f7fb fc43 	bl	8001016 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005790:	201f      	movs	r0, #31
 8005792:	f7fb fc5c 	bl	800104e <HAL_NVIC_EnableIRQ>
}
 8005796:	bf00      	nop
 8005798:	3728      	adds	r7, #40	; 0x28
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010c00 	.word	0x40010c00

080057ac <HAL_pushButton_MspInit>:
//===================================================================
//			GPIO USER PUSH BUTTON
// PC13
//===================================================================
void HAL_pushButton_MspInit(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057b2:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <HAL_pushButton_MspInit+0x40>)
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <HAL_pushButton_MspInit+0x40>)
 80057b8:	f043 0310 	orr.w	r3, r3, #16
 80057bc:	6193      	str	r3, [r2, #24]
 80057be:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <HAL_pushButton_MspInit+0x40>)
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin : PC13 */
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80057ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057ce:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057d8:	f107 0308 	add.w	r3, r7, #8
 80057dc:	4619      	mov	r1, r3
 80057de:	4804      	ldr	r0, [pc, #16]	; (80057f0 <HAL_pushButton_MspInit+0x44>)
 80057e0:	f7fb fcf6 	bl	80011d0 <HAL_GPIO_Init>
}
 80057e4:	bf00      	nop
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40011000 	.word	0x40011000

080057f4 <HAL_vl6180x_GPIO1_MspInit>:
//===================================================================
//			vl6180x_GPIO1
// PB0 = INT
//===================================================================
void HAL_vl6180x_GPIO1_MspInit(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <HAL_vl6180x_GPIO1_MspInit+0x50>)
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	4a11      	ldr	r2, [pc, #68]	; (8005844 <HAL_vl6180x_GPIO1_MspInit+0x50>)
 8005800:	f043 0308 	orr.w	r3, r3, #8
 8005804:	6193      	str	r3, [r2, #24]
 8005806:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <HAL_vl6180x_GPIO1_MspInit+0x50>)
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005812:	2301      	movs	r3, #1
 8005814:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <HAL_vl6180x_GPIO1_MspInit+0x54>)
 8005818:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	4619      	mov	r1, r3
 8005824:	4809      	ldr	r0, [pc, #36]	; (800584c <HAL_vl6180x_GPIO1_MspInit+0x58>)
 8005826:	f7fb fcd3 	bl	80011d0 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 1);
 800582a:	2201      	movs	r2, #1
 800582c:	2107      	movs	r1, #7
 800582e:	2006      	movs	r0, #6
 8005830:	f7fb fbf1 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005834:	2006      	movs	r0, #6
 8005836:	f7fb fc0a 	bl	800104e <HAL_NVIC_EnableIRQ>
}
 800583a:	bf00      	nop
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	10110000 	.word	0x10110000
 800584c:	40010c00 	.word	0x40010c00

08005850 <HAL_GPIO_PA10_MspInit>:


void HAL_GPIO_PA10_MspInit(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005856:	4b0e      	ldr	r3, [pc, #56]	; (8005890 <HAL_GPIO_PA10_MspInit+0x40>)
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	4a0d      	ldr	r2, [pc, #52]	; (8005890 <HAL_GPIO_PA10_MspInit+0x40>)
 800585c:	f043 0304 	orr.w	r3, r3, #4
 8005860:	6193      	str	r3, [r2, #24]
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <HAL_GPIO_PA10_MspInit+0x40>)
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	687b      	ldr	r3, [r7, #4]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800586e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005872:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005874:	2301      	movs	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005878:	2300      	movs	r3, #0
 800587a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587c:	f107 0308 	add.w	r3, r7, #8
 8005880:	4619      	mov	r1, r3
 8005882:	4804      	ldr	r0, [pc, #16]	; (8005894 <HAL_GPIO_PA10_MspInit+0x44>)
 8005884:	f7fb fca4 	bl	80011d0 <HAL_GPIO_Init>


}
 8005888:	bf00      	nop
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000
 8005894:	40010800 	.word	0x40010800

08005898 <NMI_Handler>:
//===================================================================
// Cortex-M3 Processor Exceptions Handlers
//===================================================================

void NMI_Handler(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr

080058a4 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  while (1)
 80058a8:	e7fe      	b.n	80058a8 <HardFault_Handler+0x4>

080058aa <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 80058aa:	b480      	push	{r7}
 80058ac:	af00      	add	r7, sp, #0
  while (1)
 80058ae:	e7fe      	b.n	80058ae <MemManage_Handler+0x4>

080058b0 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  while (1)
 80058b4:	e7fe      	b.n	80058b4 <BusFault_Handler+0x4>

080058b6 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  while (1)
 80058ba:	e7fe      	b.n	80058ba <UsageFault_Handler+0x4>

080058bc <SVC_Handler>:
  {
  }
}

void SVC_Handler(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <DebugMon_Handler>:

void DebugMon_Handler(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
}
 80058cc:	bf00      	nop
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr

080058d4 <PendSV_Handler>:

void PendSV_Handler(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
}
 80058d8:	bf00      	nop
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80058e4:	f7fa fc78 	bl	80001d8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80058e8:	f7fb fbf6 	bl	80010d8 <HAL_SYSTICK_IRQHandler>
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <EXTI0_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f1xx.s).                                               */
//==============================================================================

void EXTI0_IRQHandler(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80058f4:	2001      	movs	r0, #1
 80058f6:	f7fb fe0b 	bl	8001510 <HAL_GPIO_EXTI_IRQHandler>
}
 80058fa:	bf00      	nop
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005904:	4802      	ldr	r0, [pc, #8]	; (8005910 <I2C1_EV_IRQHandler+0x10>)
 8005906:	f7fb ff35 	bl	8001774 <HAL_I2C_EV_IRQHandler>
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2000023c 	.word	0x2000023c

08005914 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005918:	4802      	ldr	r0, [pc, #8]	; (8005924 <I2C1_ER_IRQHandler+0x10>)
 800591a:	f7fc f82f 	bl	800197c <HAL_I2C_ER_IRQHandler>
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	2000023c 	.word	0x2000023c

08005928 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
    HAL_CAN_IRQHandler(&CanHandle);
 800592c:	4802      	ldr	r0, [pc, #8]	; (8005938 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800592e:	f7fb f81f 	bl	8000970 <HAL_CAN_IRQHandler>
}
 8005932:	bf00      	nop
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	2000018c 	.word	0x2000018c

0800593c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle_period);
 8005940:	4802      	ldr	r0, [pc, #8]	; (800594c <TIM3_IRQHandler+0x10>)
 8005942:	f7fd fda3 	bl	800348c <HAL_TIM_IRQHandler>
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200004c0 	.word	0x200004c0

08005950 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartDxlHandle);
 8005954:	4802      	ldr	r0, [pc, #8]	; (8005960 <USART3_IRQHandler+0x10>)
 8005956:	f7fe fbcb 	bl	80040f0 <HAL_UART_IRQHandler>
}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000088 	.word	0x20000088

08005964 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart2Handle);
 8005968:	4802      	ldr	r0, [pc, #8]	; (8005974 <USART2_IRQHandler+0x10>)
 800596a:	f7fe fbc1 	bl	80040f0 <HAL_UART_IRQHandler>
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	200000e0 	.word	0x200000e0

08005978 <systemClock_Config>:

#include "systemClock.h"


void systemClock_Config(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b090      	sub	sp, #64	; 0x40
 800597c:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct;
	 RCC_ClkInitTypeDef RCC_ClkInitStruct;

	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800597e:	2302      	movs	r3, #2
 8005980:	61bb      	str	r3, [r7, #24]
	 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005982:	2301      	movs	r3, #1
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
	 RCC_OscInitStruct.HSICalibrationValue = 16;
 8005986:	2310      	movs	r3, #16
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
	 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800598a:	2302      	movs	r3, #2
 800598c:	637b      	str	r3, [r7, #52]	; 0x34
	 RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800598e:	2300      	movs	r3, #0
 8005990:	63bb      	str	r3, [r7, #56]	; 0x38
	 RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005992:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005996:	63fb      	str	r3, [r7, #60]	; 0x3c
	 HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005998:	f107 0318 	add.w	r3, r7, #24
 800599c:	4618      	mov	r0, r3
 800599e:	f7fd f921 	bl	8002be4 <HAL_RCC_OscConfig>

	 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80059a2:	2301      	movs	r3, #1
 80059a4:	607b      	str	r3, [r7, #4]
	 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80059a6:	2302      	movs	r3, #2
 80059a8:	60bb      	str	r3, [r7, #8]
	 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
	 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
	 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059b2:	2300      	movs	r3, #0
 80059b4:	617b      	str	r3, [r7, #20]
	 HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 80059b6:	1d3b      	adds	r3, r7, #4
 80059b8:	2101      	movs	r1, #1
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fb76 	bl	80030ac <HAL_RCC_ClockConfig>

	 HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80059c0:	f7fd fcde 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80059c4:	4603      	mov	r3, r0
 80059c6:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <systemClock_Config+0x78>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	099b      	lsrs	r3, r3, #6
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fb fb59 	bl	8001086 <HAL_SYSTICK_Config>
	 HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80059d4:	2004      	movs	r0, #4
 80059d6:	f7fb fb63 	bl	80010a0 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80059da:	2200      	movs	r2, #0
 80059dc:	2100      	movs	r1, #0
 80059de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059e2:	f7fb fb18 	bl	8001016 <HAL_NVIC_SetPriority>

}
 80059e6:	bf00      	nop
 80059e8:	3740      	adds	r7, #64	; 0x40
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	10624dd3 	.word	0x10624dd3

080059f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <SystemInit+0x5c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <SystemInit+0x5c>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8005a04:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <SystemInit+0x5c>)
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	4911      	ldr	r1, [pc, #68]	; (8005a50 <SystemInit+0x5c>)
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <SystemInit+0x60>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <SystemInit+0x5c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <SystemInit+0x5c>)
 8005a16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <SystemInit+0x5c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <SystemInit+0x5c>)
 8005a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a2a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8005a2c:	4b08      	ldr	r3, [pc, #32]	; (8005a50 <SystemInit+0x5c>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a07      	ldr	r2, [pc, #28]	; (8005a50 <SystemInit+0x5c>)
 8005a32:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005a36:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <SystemInit+0x5c>)
 8005a3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005a3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <SystemInit+0x64>)
 8005a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a46:	609a      	str	r2, [r3, #8]
#endif 
}
 8005a48:	bf00      	nop
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	40021000 	.word	0x40021000
 8005a54:	f8ff0000 	.word	0xf8ff0000
 8005a58:	e000ed00 	.word	0xe000ed00

08005a5c <HAL_GPIO_EXTI_Callback>:
void SetDisplayString(const char *msg) {
    DISP_NextString=msg;
}
//============================================================
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0)
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_GPIO_EXTI_Callback+0x14>
	{
		XNUCLEO6180XA1_UserIntHandler();
 8005a6c:	f000 f812 	bl	8005a94 <XNUCLEO6180XA1_UserIntHandler>
	}
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_SYSTICK_Callback>:
//============================================================

void HAL_SYSTICK_Callback(void){
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
    g_TickCnt++;
 8005a7c:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <HAL_SYSTICK_Callback+0x18>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	4a03      	ldr	r2, [pc, #12]	; (8005a90 <HAL_SYSTICK_Callback+0x18>)
 8005a84:	6013      	str	r3, [r2, #0]
}
 8005a86:	bf00      	nop
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	2000007c 	.word	0x2000007c

08005a94 <XNUCLEO6180XA1_UserIntHandler>:
    return state;
}
//============================================================
volatile int IntrFired=0;
/* VL6180x shield user interrupt handler */
void XNUCLEO6180XA1_UserIntHandler(void){
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
    IntrFired ++;
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <XNUCLEO6180XA1_UserIntHandler+0x18>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	4a03      	ldr	r2, [pc, #12]	; (8005aac <XNUCLEO6180XA1_UserIntHandler+0x18>)
 8005aa0:	6013      	str	r3, [r2, #0]
}
 8005aa2:	bf00      	nop
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000074 	.word	0x20000074

08005ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005ab2:	e003      	b.n	8005abc <LoopCopyDataInit>

08005ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005aba:	3104      	adds	r1, #4

08005abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005abc:	480a      	ldr	r0, [pc, #40]	; (8005ae8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005ac4:	d3f6      	bcc.n	8005ab4 <CopyDataInit>
  ldr r2, =_sbss
 8005ac6:	4a0a      	ldr	r2, [pc, #40]	; (8005af0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005ac8:	e002      	b.n	8005ad0 <LoopFillZerobss>

08005aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005aca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005acc:	f842 3b04 	str.w	r3, [r2], #4

08005ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005ad0:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ad4:	d3f9      	bcc.n	8005aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005ad6:	f7ff ff8d 	bl	80059f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ada:	f000 f80f 	bl	8005afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005ade:	f7ff fb7f 	bl	80051e0 <main>
  bx lr
 8005ae2:	4770      	bx	lr
  ldr r3, =_sidata
 8005ae4:	08005f14 	.word	0x08005f14
  ldr r0, =_sdata
 8005ae8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8005af0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8005af4:	20000500 	.word	0x20000500

08005af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005af8:	e7fe      	b.n	8005af8 <ADC1_2_IRQHandler>
	...

08005afc <__libc_init_array>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	2600      	movs	r6, #0
 8005b00:	4d0c      	ldr	r5, [pc, #48]	; (8005b34 <__libc_init_array+0x38>)
 8005b02:	4c0d      	ldr	r4, [pc, #52]	; (8005b38 <__libc_init_array+0x3c>)
 8005b04:	1b64      	subs	r4, r4, r5
 8005b06:	10a4      	asrs	r4, r4, #2
 8005b08:	42a6      	cmp	r6, r4
 8005b0a:	d109      	bne.n	8005b20 <__libc_init_array+0x24>
 8005b0c:	f000 f828 	bl	8005b60 <_init>
 8005b10:	2600      	movs	r6, #0
 8005b12:	4d0a      	ldr	r5, [pc, #40]	; (8005b3c <__libc_init_array+0x40>)
 8005b14:	4c0a      	ldr	r4, [pc, #40]	; (8005b40 <__libc_init_array+0x44>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	42a6      	cmp	r6, r4
 8005b1c:	d105      	bne.n	8005b2a <__libc_init_array+0x2e>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b24:	4798      	blx	r3
 8005b26:	3601      	adds	r6, #1
 8005b28:	e7ee      	b.n	8005b08 <__libc_init_array+0xc>
 8005b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2e:	4798      	blx	r3
 8005b30:	3601      	adds	r6, #1
 8005b32:	e7f2      	b.n	8005b1a <__libc_init_array+0x1e>
 8005b34:	08005f0c 	.word	0x08005f0c
 8005b38:	08005f0c 	.word	0x08005f0c
 8005b3c:	08005f0c 	.word	0x08005f0c
 8005b40:	08005f10 	.word	0x08005f10

08005b44 <memcpy>:
 8005b44:	440a      	add	r2, r1
 8005b46:	4291      	cmp	r1, r2
 8005b48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b4c:	d100      	bne.n	8005b50 <memcpy+0xc>
 8005b4e:	4770      	bx	lr
 8005b50:	b510      	push	{r4, lr}
 8005b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b56:	4291      	cmp	r1, r2
 8005b58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5c:	d1f9      	bne.n	8005b52 <memcpy+0xe>
 8005b5e:	bd10      	pop	{r4, pc}

08005b60 <_init>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	bf00      	nop
 8005b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b66:	bc08      	pop	{r3}
 8005b68:	469e      	mov	lr, r3
 8005b6a:	4770      	bx	lr

08005b6c <_fini>:
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	bf00      	nop
 8005b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b72:	bc08      	pop	{r3}
 8005b74:	469e      	mov	lr, r3
 8005b76:	4770      	bx	lr
